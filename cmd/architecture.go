package cmd

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"miniReviewer/internal/analyzer"
	"miniReviewer/internal/filesystem"
	"miniReviewer/internal/types"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

// ArchitectureCmd –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
func ArchitectureCmd() *cobra.Command {
	var path, output string

	cmd := &cobra.Command{
		Use:   "architecture",
		Short: "AI-–∞–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞",
		Long: `–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ —Ñ–∞–π–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI (Ollama).
–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –∏ –≤—ã—è–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã.
–ú–æ–∂–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã, —Ç–∞–∫ –∏ —Ü–µ–ª—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.`,
		Run: func(cmd *cobra.Command, args []string) {
			runArchitectureAnalysis(path, output)
		},
	}

	cmd.Flags().StringVar(&path, "path", ".", "–ø—É—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
	cmd.Flags().StringVarP(&output, "output", "o", "", "—Ñ–∞–π–ª –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")

	return cmd
}

// runArchitectureAnalysis –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
func runArchitectureAnalysis(path, output string) {
	verbose := viper.GetBool("verbose")

	printArchitectureHeader(path, verbose)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—É—Ç–∏
	fileInfo, err := os.Stat(path)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—É—Ç–∏: %v\n", err)
		os.Exit(1)
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
	var result *types.CodeAnalysisResult
	if !fileInfo.IsDir() {
		result = analyzeArchitectureFile(path, verbose)
	} else {
		result = analyzeArchitectureProject(path, verbose)
	}

	// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	printArchitectureResults(result, path, fileInfo.IsDir(), verbose)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª
	if output != "" {
		saveArchitectureResults(result, output, verbose)
	}

	fmt.Println("‚úÖ –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω")
}

// printArchitectureHeader –≤—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
func printArchitectureHeader(path string, verbose bool) {
	fmt.Println("üèóÔ∏è  –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...")
	fmt.Printf("–ú–æ–¥–µ–ª—å: %s\n", viper.GetString("ollama.default_model"))
	fmt.Printf("–ü—É—Ç—å: %s\n", path)

	if verbose {
		fmt.Println("üîç –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω")
		printArchitectureSettings()
	}
}

// printArchitectureSettings –≤—ã–≤–æ–¥–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
func printArchitectureSettings() {
	fmt.Printf("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: %v\n", viper.GetStringSlice("analysis.ignore_patterns"))
	fmt.Printf("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: %s\n", viper.GetString("analysis.max_file_size"))
}

// analyzeArchitectureFile –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
func analyzeArchitectureFile(filePath string, verbose bool) *types.CodeAnalysisResult {
	if verbose {
		fmt.Printf("üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª: %s\n", filePath)
	}

	// –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
	content, err := os.ReadFile(filePath)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v\n", err)
		os.Exit(1)
	}

	if verbose {
		fmt.Printf("üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: %d –±–∞–π—Ç\n", len(content))
		fmt.Println("üß† –ó–∞–ø—É—Å–∫–∞—é AI-–∞–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞...")
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	context := getFileContext(filePath)

	architectureAnalyzer := analyzer.NewArchitectureAnalyzer()
	result, err := architectureAnalyzer.Analyze(string(content), context)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞: %v\n", err)
		os.Exit(1)
	}

	if verbose {
		fmt.Println("‚úÖ AI-–∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
	}

	return result
}

// analyzeArchitectureProject –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
func analyzeArchitectureProject(projectPath string, verbose bool) *types.CodeAnalysisResult {
	if verbose {
		fmt.Println("üìÅ –°–∫–∞–Ω–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞...")
	}

	ignorePatterns := viper.GetStringSlice("analysis.ignore_patterns")
	scanner := filesystem.NewScanner(ignorePatterns, 0)

	structure, err := scanner.AnalyzeProjectStructure(projectPath)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: %v\n", err)
		os.Exit(1)
	}

	if verbose {
		fmt.Println("üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
	}

	fmt.Printf("üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:\n%s\n", structure)

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI
	if verbose {
		fmt.Println("üß† –ó–∞–ø—É—Å–∫–∞—é AI-–∞–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
	}

	architectureAnalyzer := analyzer.NewArchitectureAnalyzer()
	result, err := architectureAnalyzer.Analyze(structure, "Project architecture analysis")
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞: %v\n", err)
		os.Exit(1)
	}

	if verbose {
		fmt.Println("‚úÖ AI-–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
	}

	return result
}

// getFileContext –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞
func getFileContext(filePath string) string {
	ext := strings.ToLower(filepath.Ext(filePath))

	switch ext {
	case ".js", ".ts":
		return "Architecture analysis of JavaScript/TypeScript file"
	case ".go":
		return "Architecture analysis of Go file"
	case ".py":
		return "Architecture analysis of Python file"
	case ".java":
		return "Architecture analysis of Java file"
	case ".cpp", ".cc", ".cxx":
		return "Architecture analysis of C++ file"
	case ".rs":
		return "Architecture analysis of Rust file"
	case ".kt":
		return "Architecture analysis of Kotlin file"
	default:
		return fmt.Sprintf("Architecture analysis of %s file", ext)
	}
}

// printArchitectureResults –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
func printArchitectureResults(result *types.CodeAnalysisResult, path string, isProject bool, verbose bool) {
	fmt.Printf("\nüìä –û—Ü–µ–Ω–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: %d/100\n", result.Score)

	if len(result.Issues) > 0 {
		printArchitectureIssues(result, path, isProject, verbose)
		printArchitectureStatistics(result, verbose)
	} else {
		if verbose {
			fmt.Println("‚úÖ –ü—Ä–æ–±–ª–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
		}
	}
}

// printArchitectureIssues –≤—ã–≤–æ–¥–∏—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
func printArchitectureIssues(result *types.CodeAnalysisResult, path string, isProject bool, verbose bool) {
	fmt.Printf("\nüîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:\n")

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –ø–æ —Ñ–∞–π–ª–∞–º
	issuesByFile := make(map[string][]types.Issue)
	for _, issue := range result.Issues {
		fileName := path
		if !isProject {
			fileName = filepath.Base(path)
		}
		issuesByFile[fileName] = append(issuesByFile[fileName], issue)
	}

	for fileName, issues := range issuesByFile {
		fmt.Printf("\nüìÅ %s:\n", fileName)
		printFileArchitectureIssues(issues, verbose)
	}
}

// printFileArchitectureIssues –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
func printFileArchitectureIssues(issues []types.Issue, verbose bool) {
	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –ø–æ —Ç–∏–ø—É
	issuesByType := make(map[string][]types.Issue)
	for _, issue := range issues {
		issuesByType[issue.Type] = append(issuesByType[issue.Type], issue)
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Ç–∏–ø–æ–≤
	typePriority := []string{"security", "quality", "performance", "style", "bug", "architecture"}

	for _, issueType := range typePriority {
		if typeIssues, exists := issuesByType[issueType]; exists {
			printIssueTypeGroup(issueType, typeIssues, verbose)
		}
	}
}

// printIssueTypeGroup –≤—ã–≤–æ–¥–∏—Ç –≥—Ä—É–ø–ø—É –ø—Ä–æ–±–ª–µ–º –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞
func printIssueTypeGroup(issueType string, issues []types.Issue, verbose bool) {
	// –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–±–ª–µ–º
	typeEmoji := map[string]string{
		"security":     "üîí",
		"quality":      "‚ö°",
		"performance":  "üöÄ",
		"style":        "üé®",
		"bug":          "üêõ",
		"architecture": "üèóÔ∏è",
	}

	emoji := typeEmoji[issueType]
	if emoji == "" {
		emoji = "üí°"
	}

	fmt.Printf("\n  %s %s (%d –ø—Ä–æ–±–ª–µ–º):\n", emoji, strings.ToUpper(issueType), len(issues))

	for i, issue := range issues {
		printArchitectureIssue(issue, verbose)

		// –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –ø—Ä–æ–±–ª–µ–º–∞–º–∏
		if i < len(issues)-1 {
			fmt.Println("       ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
		}
	}
}

// printArchitectureIssue –≤—ã–≤–æ–¥–∏—Ç –æ–¥–Ω—É –ø—Ä–æ–±–ª–µ–º—É –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
func printArchitectureIssue(issue types.Issue, verbose bool) {
	// –≠–º–æ–¥–∑–∏ –¥–ª—è –≤–∞–∂–Ω–æ—Å—Ç–∏
	severityEmoji := map[string]string{
		"critical": "üö®",
		"high":     "‚ö†Ô∏è",
		"medium":   "‚ö°",
		"low":      "üí°",
		"info":     "‚ÑπÔ∏è",
	}

	emoji := severityEmoji[issue.Severity]
	if emoji == "" {
		emoji = "üí°"
	}

	fmt.Printf("\n    %s [%s] %s\n", emoji, strings.ToUpper(issue.Severity), issue.Message)

	if issue.Line > 0 {
		fmt.Printf("       üìç –°—Ç—Ä–æ–∫–∞: %d\n", issue.Line)
	}

	if issue.Suggestion != "" {
		fmt.Printf("       üí° –†–µ—à–µ–Ω–∏–µ: %s\n", issue.Suggestion)
	}

	if issue.Reasoning != "" {
		fmt.Printf("       üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: %s\n", issue.Reasoning)
	}
}

// printArchitectureStatistics –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
func printArchitectureStatistics(result *types.CodeAnalysisResult, verbose bool) {
	fmt.Printf("\nüìà –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n")

	severityCounts := make(map[string]int)
	typeCounts := make(map[string]int)

	for _, issue := range result.Issues {
		severityCounts[issue.Severity]++
		typeCounts[issue.Type]++
	}

	printSeverityStatistics(severityCounts)
	printTypeStatistics(typeCounts)
}

// printSeverityStatistics –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
func printSeverityStatistics(severityCounts map[string]int) {
	fmt.Printf("  üîç –ü–æ –≤–∞–∂–Ω–æ—Å—Ç–∏:\n")
	for _, severity := range []string{"critical", "high", "medium", "low", "info"} {
		if count := severityCounts[severity]; count > 0 {
			emoji := map[string]string{
				"critical": "üö®",
				"high":     "‚ö†Ô∏è",
				"medium":   "‚ö°",
				"low":      "üí°",
				"info":     "‚ÑπÔ∏è",
			}[severity]
			fmt.Printf("    %s %s: %d\n", emoji, strings.ToUpper(severity), count)
		}
	}
}

// printTypeStatistics –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º
func printTypeStatistics(typeCounts map[string]int) {
	fmt.Printf("  üìä –ü–æ —Ç–∏–ø–∞–º:\n")
	for _, issueType := range []string{"security", "quality", "performance", "style", "bug", "architecture"} {
		if count := typeCounts[issueType]; count > 0 {
			emoji := map[string]string{
				"security":     "üîí",
				"quality":      "‚ö°",
				"performance":  "üöÄ",
				"style":        "üé®",
				"bug":          "üêõ",
				"architecture": "üèóÔ∏è",
			}[issueType]
			fmt.Printf("    %s %s: %d\n", emoji, strings.ToUpper(issueType), count)
		}
	}
}

// saveArchitectureResults —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –≤ —Ñ–∞–π–ª
func saveArchitectureResults(result *types.CodeAnalysisResult, output string, verbose bool) {
	if verbose {
		fmt.Printf("üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª: %s\n", output)
	}

	if err := saveResultsToFile([]*types.CodeAnalysisResult{result}, output); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %v\n", err)
	} else {
		fmt.Printf("\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: %s\n", output)
	}
}
