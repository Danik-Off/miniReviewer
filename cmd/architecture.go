package cmd

import (
	"fmt"
	"os"

	"miniReviewer/internal/analyzer"
	"miniReviewer/internal/filesystem"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

// ArchitectureCmd –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
func ArchitectureCmd() *cobra.Command {
	var path, output string

	cmd := &cobra.Command{
		Use:   "architecture",
		Short: "AI-–∞–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞",
		Long: `–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI (Ollama).
–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –∏ –≤—ã—è–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã.`,
		Run: func(cmd *cobra.Command, args []string) {
			fmt.Println("üèóÔ∏è  –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...")
			fmt.Printf("–ú–æ–¥–µ–ª—å: %s\n", viper.GetString("ollama.default_model"))
			fmt.Printf("–ü—É—Ç—å: %s\n", path)

			// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
			ignorePatterns := viper.GetStringSlice("analysis.ignore_patterns")
			scanner := filesystem.NewScanner(ignorePatterns, 0)
			structure, err := scanner.AnalyzeProjectStructure(path)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: %v\n", err)
				os.Exit(1)
			}

			fmt.Printf("üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:\n%s\n", structure)

			// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å –ø–æ–º–æ—â—å—é AI
			codeAnalyzer := analyzer.NewCodeAnalyzer()
			result, err := codeAnalyzer.AnalyzeCode(structure, "Project architecture analysis")
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞: %v\n", err)
				os.Exit(1)
			}

			fmt.Printf("\nüìä –û—Ü–µ–Ω–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: %d/100\n", result.Score)
			for _, issue := range result.Issues {
				fmt.Printf("üí° %s: %s\n", issue.Type, issue.Message)
			}

			fmt.Println("‚úÖ –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω")
		},
	}

	cmd.Flags().StringVar(&path, "path", ".", "–ø—É—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
	cmd.Flags().StringVarP(&output, "output", "o", "", "—Ñ–∞–π–ª –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")

	return cmd
}
