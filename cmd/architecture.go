package cmd

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"miniReviewer/internal/analyzer"
	"miniReviewer/internal/filesystem"
	"miniReviewer/internal/types"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

// ArchitectureCmd –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
func ArchitectureCmd() *cobra.Command {
	var path, output string

	cmd := &cobra.Command{
		Use:   "architecture",
		Short: "AI-–∞–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞",
		Long: `–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ —Ñ–∞–π–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI (Ollama).
–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –∏ –≤—ã—è–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã.
–ú–æ–∂–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã, —Ç–∞–∫ –∏ —Ü–µ–ª—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.`,
		Run: func(cmd *cobra.Command, args []string) {
			verbose := viper.GetBool("verbose")

			fmt.Println("üèóÔ∏è  –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...")
			fmt.Printf("–ú–æ–¥–µ–ª—å: %s\n", viper.GetString("ollama.default_model"))
			fmt.Printf("–ü—É—Ç—å: %s\n", path)

			if verbose {
				fmt.Println("üîç –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω")
				fmt.Printf("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: %v\n", viper.GetStringSlice("analysis.ignore_patterns"))
				fmt.Printf("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: %s\n", viper.GetString("analysis.max_file_size"))
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å —Ñ–∞–π–ª–æ–º –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π
			fileInfo, err := os.Stat(path)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—É—Ç–∏: %v\n", err)
				os.Exit(1)
			}

			var result *types.CodeAnalysisResult
			codeAnalyzer := analyzer.NewCodeAnalyzer()

			if !fileInfo.IsDir() {
				// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
				if verbose {
					fmt.Printf("üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª: %s\n", path)
				}

				// –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
				content, err := os.ReadFile(path)
				if err != nil {
					fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v\n", err)
					os.Exit(1)
				}

				if verbose {
					fmt.Printf("üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: %d –±–∞–π—Ç\n", len(content))
					fmt.Println("üß† –ó–∞–ø—É—Å–∫–∞—é AI-–∞–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞...")
				}

				// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
				ext := strings.ToLower(filepath.Ext(path))
				context := fmt.Sprintf("Architecture analysis of %s file", ext)
				if ext == ".js" || ext == ".ts" {
					context = "Architecture analysis of JavaScript/TypeScript file"
				} else if ext == ".go" {
					context = "Architecture analysis of Go file"
				} else if ext == ".py" {
					context = "Architecture analysis of Python file"
				}

				result, err = codeAnalyzer.AnalyzeCode(string(content), context)
				if err != nil {
					fmt.Printf("‚ùå –û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞: %v\n", err)
					os.Exit(1)
				}

				if verbose {
					fmt.Println("‚úÖ AI-–∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
				}
			} else {
				// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
				if verbose {
					fmt.Println("üìÅ –°–∫–∞–Ω–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞...")
				}

				ignorePatterns := viper.GetStringSlice("analysis.ignore_patterns")
				scanner := filesystem.NewScanner(ignorePatterns, 0)

				structure, err := scanner.AnalyzeProjectStructure(path)
				if err != nil {
					fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: %v\n", err)
					os.Exit(1)
				}

				if verbose {
					fmt.Println("üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
				}

				fmt.Printf("üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:\n%s\n", structure)

				// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI
				if verbose {
					fmt.Println("üß† –ó–∞–ø—É—Å–∫–∞—é AI-–∞–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
				}

				result, err = codeAnalyzer.AnalyzeCode(structure, "Project architecture analysis")
				if err != nil {
					fmt.Printf("‚ùå –û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞: %v\n", err)
					os.Exit(1)
				}

				if verbose {
					fmt.Println("‚úÖ AI-–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
				}
			}

			fmt.Printf("\nüìä –û—Ü–µ–Ω–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: %d/100\n", result.Score)

			if len(result.Issues) > 0 {
				fmt.Printf("\nüîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:\n")

				// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –ø–æ —Ñ–∞–π–ª–∞–º (–∫–∞–∫ –≤ quality)
				issuesByFile := make(map[string][]types.Issue)
				for _, issue := range result.Issues {
					// –î–ª—è architecture –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∫–∞–∫ –∏–º—è —Ñ–∞–π–ª–∞
					fileName := path
					if !fileInfo.IsDir() {
						fileName = filepath.Base(path)
					}
					issuesByFile[fileName] = append(issuesByFile[fileName], issue)
				}

				for fileName, issues := range issuesByFile {
					fmt.Printf("\nüìÅ %s:\n", fileName)

					// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –ø–æ —Ç–∏–ø—É
					issuesByType := make(map[string][]types.Issue)
					for _, issue := range issues {
						issuesByType[issue.Type] = append(issuesByType[issue.Type], issue)
					}

					// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Ç–∏–ø–æ–≤
					typePriority := []string{"security", "quality", "performance", "style", "bug", "architecture"}

					for _, issueType := range typePriority {
						if typeIssues, exists := issuesByType[issueType]; exists {
							// –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–±–ª–µ–º
							typeEmoji := map[string]string{
								"security":     "üîí",
								"quality":      "‚ö°",
								"performance":  "üöÄ",
								"style":        "üé®",
								"bug":          "üêõ",
								"architecture": "üèóÔ∏è",
							}

							emoji := typeEmoji[issueType]
							if emoji == "" {
								emoji = "üí°"
							}

							fmt.Printf("\n  %s %s (%d –ø—Ä–æ–±–ª–µ–º):\n", emoji, strings.ToUpper(issueType), len(typeIssues))

							for i, issue := range typeIssues {
								// –≠–º–æ–¥–∑–∏ –¥–ª—è –≤–∞–∂–Ω–æ—Å—Ç–∏
								severityEmoji := map[string]string{
									"critical": "üö®",
									"high":     "‚ö†Ô∏è",
									"medium":   "‚ö°",
									"low":      "üí°",
									"info":     "‚ÑπÔ∏è",
								}

								emoji = severityEmoji[issue.Severity]
								if emoji == "" {
									emoji = "üí°"
								}

								fmt.Printf("\n    %s [%s] %s\n", emoji, strings.ToUpper(issue.Severity), issue.Message)

								if issue.Line > 0 {
									fmt.Printf("       üìç –°—Ç—Ä–æ–∫–∞: %d\n", issue.Line)
								}

								if issue.Suggestion != "" {
									fmt.Printf("       üí° –†–µ—à–µ–Ω–∏–µ: %s\n", issue.Suggestion)
								}

								if issue.Reasoning != "" {
									fmt.Printf("       üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: %s\n", issue.Reasoning)
								}

								// –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –ø—Ä–æ–±–ª–µ–º–∞–º–∏
								if i < len(typeIssues)-1 {
									fmt.Println("       ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
								}
							}
						}
					}
				}

				// –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º (–∫–∞–∫ –≤ quality)
				fmt.Printf("\nüìà –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n")
				severityCounts := make(map[string]int)
				typeCounts := make(map[string]int)

				for _, issue := range result.Issues {
					severityCounts[issue.Severity]++
					typeCounts[issue.Type]++
				}

				fmt.Printf("  üîç –ü–æ –≤–∞–∂–Ω–æ—Å—Ç–∏:\n")
				for _, severity := range []string{"critical", "high", "medium", "low", "info"} {
					if count := severityCounts[severity]; count > 0 {
						emoji := map[string]string{
							"critical": "üö®",
							"high":     "‚ö†Ô∏è",
							"medium":   "‚ö°",
							"low":      "üí°",
							"info":     "‚ÑπÔ∏è",
						}[severity]
						fmt.Printf("    %s %s: %d\n", emoji, strings.ToUpper(severity), count)
					}
				}

				fmt.Printf("  üìä –ü–æ —Ç–∏–ø–∞–º:\n")
				for _, issueType := range []string{"security", "quality", "performance", "style", "bug", "architecture"} {
					if count := typeCounts[issueType]; count > 0 {
						emoji := map[string]string{
							"security":     "üîí",
							"quality":      "‚ö°",
							"performance":  "üöÄ",
							"style":        "üé®",
							"bug":          "üêõ",
							"architecture": "üèóÔ∏è",
						}[issueType]
						fmt.Printf("    %s %s: %d\n", emoji, strings.ToUpper(issueType), count)
					}
				}

			} else {
				if verbose {
					fmt.Println("‚úÖ –ü—Ä–æ–±–ª–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
				}
			}

			fmt.Println("‚úÖ –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω")
		},
	}

	cmd.Flags().StringVar(&path, "path", ".", "–ø—É—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
	cmd.Flags().StringVarP(&output, "output", "o", "", "—Ñ–∞–π–ª –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")

	return cmd
}
