package cmd

import (
	"fmt"
	"os"
	"time"

	"miniReviewer/internal/analyzer"
	"miniReviewer/internal/filesystem"
	"miniReviewer/internal/reporter"
	"miniReviewer/internal/types"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

// ReportCmd –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
func ReportCmd() *cobra.Command {
	var format, output string

	cmd := &cobra.Command{
		Use:   "report",
		Short: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI-–æ—Ç—á–µ—Ç–∞",
		Long: `–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∞–Ω–∞–ª–∏–∑–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI (Ollama).
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—ã–≤–æ–¥–∞.`,
		Run: func(cmd *cobra.Command, args []string) {
			verbose := viper.GetBool("verbose")

			fmt.Println("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
			fmt.Printf("–ú–æ–¥–µ–ª—å: %s\n", viper.GetString("ollama.default_model"))
			fmt.Printf("–§–æ—Ä–º–∞—Ç: %s\n", format)
			fmt.Printf("–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: %s\n", output)

			if verbose {
				fmt.Println("üîç –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω")
				fmt.Printf("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤:\n")
				fmt.Printf("  - –í–∫–ª—é—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏: %t\n", viper.GetBool("reports.include_metrics"))
				fmt.Printf("  - –í–∫–ª—é—á–∏—Ç—å AI-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: %t\n", viper.GetBool("reports.include_ai_suggestions"))
				fmt.Printf("  - –í–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞: %t\n", viper.GetBool("reports.include_code_examples"))
				fmt.Printf("  - –í–∫–ª—é—á–∏—Ç—å —É—Ä–æ–≤–Ω–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏: %t\n", viper.GetBool("reports.include_severity_levels"))
				fmt.Printf("  - –í–∫–ª—é—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: %t\n", viper.GetBool("reports.include_recommendations"))
			}

			// –°–æ–∑–¥–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞
			options := &types.ReportOptions{
				Format:                 format,
				IncludeMetrics:         viper.GetBool("reports.include_metrics"),
				IncludeAISuggestions:   viper.GetBool("reports.include_ai_suggestions"),
				IncludeCodeExamples:    viper.GetBool("reports.include_code_examples"),
				IncludeSeverityLevels:  viper.GetBool("reports.include_severity_levels"),
				IncludeRecommendations: viper.GetBool("reports.include_recommendations"),
			}

			if verbose {
				fmt.Println("‚öôÔ∏è  –û–ø—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
			}

			// –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤
			reportGen := reporter.NewReporter(options)

			if verbose {
				fmt.Println("üìù –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω")
			}

			// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞
			var results []*types.CodeAnalysisResult
			codeAnalyzer := analyzer.NewCodeAnalyzer()

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)
			analysisPath := "."
			if len(args) > 0 {
				analysisPath = args[0]
			}

			if verbose {
				fmt.Printf("üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—É—Ç—å: %s\n", analysisPath)
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å —Ñ–∞–π–ª–æ–º –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π
			fileInfo, err := os.Stat(analysisPath)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—É—Ç–∏: %v\n", err)
				os.Exit(1)
			}

			if !fileInfo.IsDir() {
				// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
				if verbose {
					fmt.Printf("üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª: %s\n", analysisPath)
				}

				content, err := os.ReadFile(analysisPath)
				if err != nil {
					fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v\n", err)
					os.Exit(1)
				}

				// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ñ–∞–π–ª–∞
				combinedResult := &types.CodeAnalysisResult{
					File:      analysisPath,
					Issues:    []types.Issue{},
					Score:     100,
					Timestamp: time.Now(),
				}

				// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
				qualityResult, err := codeAnalyzer.AnalyzeCode(string(content), fmt.Sprintf("Quality analysis of %s", analysisPath))
				if err != nil {
					fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞: %v\n", err)
				} else {
					combinedResult.Issues = append(combinedResult.Issues, qualityResult.Issues...)
				}

				// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
				securityIssues := codeAnalyzer.AnalyzeSecurity(string(content), analysisPath)
				combinedResult.Issues = append(combinedResult.Issues, securityIssues...)

				// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
				architectureResult, err := codeAnalyzer.AnalyzeCode(string(content), fmt.Sprintf("Architecture analysis of %s", analysisPath))
				if err != nil {
					fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: %v\n", err)
				} else {
					// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
					for _, issue := range architectureResult.Issues {
						if issue.Type == "architecture" {
							combinedResult.Issues = append(combinedResult.Issues, issue)
						}
					}
				}

				// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É
				combinedResult.Score = 100 - len(combinedResult.Issues)*10
				if combinedResult.Score < 0 {
					combinedResult.Score = 0
				}

				results = append(results, combinedResult)

			} else {
				// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
				if verbose {
					fmt.Println("üìÅ –°–∫–∞–Ω–∏—Ä—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã...")
				}

				ignorePatterns := viper.GetStringSlice("analysis.ignore_patterns")
				scanner := filesystem.NewScanner(ignorePatterns, 0)

				files, err := scanner.FindSupportedFiles(analysisPath)
				if err != nil {
					fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: %v\n", err)
					os.Exit(1)
				}

				if verbose {
					fmt.Printf("üìã –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: %d\n", len(files))
				}

				for i, file := range files {
					if verbose {
						fmt.Printf("üìù [%d/%d] –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é: %s\n", i+1, len(files), file)
					}

					content, err := os.ReadFile(file)
					if err != nil {
						if verbose {
							fmt.Printf("   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: %v\n", err)
						}
						continue
					}

					// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ñ–∞–π–ª–∞
					combinedResult := &types.CodeAnalysisResult{
						File:      file,
						Issues:    []types.Issue{},
						Score:     100,
						Timestamp: time.Now(),
					}

					// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
					qualityResult, err := codeAnalyzer.AnalyzeCode(string(content), fmt.Sprintf("Quality analysis of %s", file))
					if err != nil {
						if verbose {
							fmt.Printf("   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞: %v\n", err)
						}
						continue
					}

					combinedResult.Issues = append(combinedResult.Issues, qualityResult.Issues...)

					// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
					securityIssues := codeAnalyzer.AnalyzeSecurity(string(content), file)
					combinedResult.Issues = append(combinedResult.Issues, securityIssues...)

					// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
					architectureResult, err := codeAnalyzer.AnalyzeCode(string(content), fmt.Sprintf("Architecture analysis of %s", file))
					if err != nil {
						if verbose {
							fmt.Printf("   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: %v\n", err)
						}
						continue
					} else {
						// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
						for _, issue := range architectureResult.Issues {
							if issue.Type == "architecture" {
								combinedResult.Issues = append(combinedResult.Issues, issue)
							}
						}
					}

					// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É
					combinedResult.Score = 100 - len(combinedResult.Issues)*10
					if combinedResult.Score < 0 {
						combinedResult.Score = 0
					}

					results = append(results, combinedResult)
				}
			}

			if verbose {
				fmt.Printf("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞: %d\n", len(results))
				fmt.Println("üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç...")
			}

			// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
			report, err := reportGen.GenerateReport(results, format)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: %v\n", err)
				os.Exit(1)
			}

			if verbose {
				fmt.Printf("‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (—Ä–∞–∑–º–µ—Ä: %d —Å–∏–º–≤–æ–ª–æ–≤)\n", len(report))
			}

			if output != "" {
				if verbose {
					fmt.Printf("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª: %s\n", output)
				}

				if err := reportGen.SaveReport(report, output); err != nil {
					fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: %v\n", err)
					os.Exit(1)
				}
				fmt.Printf("üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: %s\n", output)
			} else {
				if verbose {
					fmt.Println("üìÑ –í—ã–≤–æ–∂—É –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å:")
				}
				fmt.Println("\n" + report)
			}

			fmt.Println("‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
		},
	}

	cmd.Flags().StringVar(&format, "format", "html", "—Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞ (html, json, markdown)")
	cmd.Flags().StringVarP(&output, "output", "o", "report.html", "—Ñ–∞–π–ª –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")

	return cmd
}
