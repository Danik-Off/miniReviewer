package cmd

import (
	"fmt"
	"os"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"miniReviewer/internal/reporter"
	"miniReviewer/internal/types"
)

// ReportCmd –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
func ReportCmd() *cobra.Command {
	var format, output string

	cmd := &cobra.Command{
		Use:   "report",
		Short: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI-–æ—Ç—á–µ—Ç–∞",
		Long: `–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∞–Ω–∞–ª–∏–∑–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI (Ollama).
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—ã–≤–æ–¥–∞.`,
		Run: func(cmd *cobra.Command, args []string) {
			fmt.Println("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
			fmt.Printf("–ú–æ–¥–µ–ª—å: %s\n", viper.GetString("ollama.default_model"))
			fmt.Printf("–§–æ—Ä–º–∞—Ç: %s\n", format)
			fmt.Printf("–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: %s\n", output)
			
			// –°–æ–∑–¥–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞
			options := &types.ReportOptions{
				Format:                format,
				IncludeMetrics:        viper.GetBool("reports.include_metrics"),
				IncludeAISuggestions:  viper.GetBool("reports.include_ai_suggestions"),
				IncludeCodeExamples:   viper.GetBool("reports.include_code_examples"),
				IncludeSeverityLevels: viper.GetBool("reports.include_severity_levels"),
				IncludeRecommendations: viper.GetBool("reports.include_recommendations"),
			}

			// –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤
			reportGen := reporter.NewReporter(options)
			
			// TODO: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞
			// –ü–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –æ—Ç—á–µ—Ç
			var results []*types.CodeAnalysisResult
			
			// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
			report, err := reportGen.GenerateReport(results, format)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: %v\n", err)
				os.Exit(1)
			}
			
			if output != "" {
				if err := reportGen.SaveReport(report, output); err != nil {
					fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: %v\n", err)
					os.Exit(1)
				}
				fmt.Printf("üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: %s\n", output)
			} else {
				fmt.Println("\n" + report)
			}
			
			fmt.Println("‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
		},
	}

	cmd.Flags().StringVar(&format, "format", "html", "—Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞ (html, json, markdown)")
	cmd.Flags().StringVarP(&output, "output", "o", "report.html", "—Ñ–∞–π–ª –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")

	return cmd
}
