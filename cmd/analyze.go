package cmd

import (
	"encoding/json"
	"fmt"
	"os"
	"strings"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"miniReviewer/internal/analyzer"
	"miniReviewer/internal/git"
	"miniReviewer/internal/types"
)

// AnalyzeCmd –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞
func AnalyzeCmd() *cobra.Command {
	var from, to, commit, output string
	var ignore []string

	cmd := &cobra.Command{
		Use:   "analyze",
		Short: "AI-–∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–¥–µ",
		Long: `–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI (Ollama).
–ú–æ–∂–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–∏—Ç—ã, –≤–µ—Ç–∫–∏ –∏–ª–∏ —Ç–µ–∫—É—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.`,
		Run: func(cmd *cobra.Command, args []string) {
			fmt.Println("üöÄ –ó–∞–ø—É—Å–∫ AI-–∞–Ω–∞–ª–∏–∑–∞...")
			fmt.Printf("–ú–æ–¥–µ–ª—å: %s\n", viper.GetString("ollama.default_model"))
			
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
			gitClient := git.NewClient()
			if !gitClient.IsRepository() {
				fmt.Println("‚ùå Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.")
				os.Exit(1)
			}

			// –ü–æ–ª—É—á–∞–µ–º diff
			var diff string
			var err error
			
			if commit != "" {
				fmt.Printf("–ê–Ω–∞–ª–∏–∑ –∫–æ–º–º–∏—Ç–∞: %s\n", commit)
				diff, err = gitClient.GetDiff(commit, commit+"~1")
			} else if from != "" && to != "" {
				fmt.Printf("–ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—Ç %s –¥–æ %s\n", from, to)
				diff, err = gitClient.GetDiff(from, to)
			} else {
				fmt.Println("–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π")
				diff, err = gitClient.GetStatus()
			}
			
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π: %v\n", err)
				os.Exit(1)
			}

			if diff == "" {
				fmt.Println("‚úÖ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
				return
			}

			if len(ignore) > 0 {
				fmt.Printf("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: %v\n", ignore)
			}
			
			fmt.Println("üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é AI...")
			
			// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥
			codeAnalyzer := analyzer.NewCodeAnalyzer()
			result, err := codeAnalyzer.AnalyzeCode(diff, "Git changes analysis")
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞: %v\n", err)
				os.Exit(1)
			}

			// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
			fmt.Printf("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:\n")
			fmt.Printf("–û—Ü–µ–Ω–∫–∞: %d/100\n", result.Score)
			fmt.Printf("–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: %d\n", len(result.Issues))
			
			for i, issue := range result.Issues {
				fmt.Printf("\n%d. [%s] %s\n", i+1, strings.ToUpper(issue.Severity), issue.Type)
				fmt.Printf("   –ü—Ä–æ–±–ª–µ–º–∞: %s\n", issue.Message)
				if issue.Suggestion != "" {
					fmt.Printf("   –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: %s\n", issue.Suggestion)
				}
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
			if output != "" {
				if err := saveResultToFile(result, output); err != nil {
					fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %v\n", err)
				} else {
					fmt.Printf("\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: %s\n", output)
				}
			}
			
			fmt.Println("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
		},
	}

	cmd.Flags().StringVar(&from, "from", "", "–∏—Å—Ö–æ–¥–Ω–∞—è –≤–µ—Ç–∫–∞/–∫–æ–º–º–∏—Ç")
	cmd.Flags().StringVar(&to, "to", "", "—Ü–µ–ª–µ–≤–∞—è –≤–µ—Ç–∫–∞/–∫–æ–º–º–∏—Ç")
	cmd.Flags().StringVar(&commit, "commit", "", "–∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞")
	cmd.Flags().StringVarP(&output, "output", "o", "", "—Ñ–∞–π–ª –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
	cmd.Flags().StringArrayVar(&ignore, "ignore", []string{}, "–ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è")

	return cmd
}

// saveResultToFile —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–∞–π–ª
func saveResultToFile(result *types.CodeAnalysisResult, filename string) error {
	data, err := json.MarshalIndent(result, "", "  ")
	if err != nil {
		return err
	}
	return os.WriteFile(filename, data, 0644)
}
