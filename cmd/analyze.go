package cmd

import (
	"encoding/json"
	"fmt"
	"os"
	"strings"

	"miniReviewer/internal/analyzer"
	"miniReviewer/internal/git"
	"miniReviewer/internal/types"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

// AnalyzeCmd –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞
func AnalyzeCmd() *cobra.Command {
	var from, to, commit, output string
	var ignore []string
	var last bool
	var commits []string
	var unstaged bool
	var staged bool
	var mr bool

	cmd := &cobra.Command{
		Use:   "analyze",
		Short: "AI-–∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–¥–µ",
		Long: `–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI (Ollama).
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞:
- –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç (--last)
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–º–º–∏—Ç—ã –ø–æ —Ö–µ—à–∞–º (--commits)
- –î–∏–∞–ø–∞–∑–æ–Ω –∫–æ–º–º–∏—Ç–æ–≤ (--from --to)
- –ù–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (--unstaged, --staged)
- Merge Request (--mr)

–¢–∏–ø—ã –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.`,
		Run: func(cmd *cobra.Command, args []string) {
			runAnalysis(from, to, output, ignore, last, commits, unstaged, staged, mr)
		},
	}

	cmd.Flags().BoolVar(&last, "last", false, "–∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞")
	cmd.Flags().StringArrayVar(&commits, "commits", []string{}, "–∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ —Ö–µ—à–∞–º")
	cmd.Flags().StringVar(&from, "from", "", "–∏—Å—Ö–æ–¥–Ω–∞—è –≤–µ—Ç–∫–∞/–∫–æ–º–º–∏—Ç –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
	cmd.Flags().StringVar(&to, "to", "", "—Ü–µ–ª–µ–≤–∞—è –≤–µ—Ç–∫–∞/–∫–æ–º–º–∏—Ç –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
	cmd.Flags().StringVar(&commit, "commit", "", "–∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞ (—É—Å—Ç–∞—Ä–µ–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --commits)")
	cmd.Flags().BoolVar(&unstaged, "unstaged", false, "–∞–Ω–∞–ª–∏–∑ –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π")
	cmd.Flags().BoolVar(&staged, "staged", false, "–∞–Ω–∞–ª–∏–∑ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫ –∫–æ–º–º–∏—Ç—É –∏–∑–º–µ–Ω–µ–Ω–∏–π")
	cmd.Flags().BoolVar(&mr, "mr", false, "–∞–Ω–∞–ª–∏–∑ Merge Request (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ—Ç–∫–æ–π)")
	cmd.Flags().StringVarP(&output, "output", "o", "", "—Ñ–∞–π–ª –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
	cmd.Flags().StringArrayVar(&ignore, "ignore", []string{}, "–ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è")

	return cmd
}

// runAnalysis –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
func runAnalysis(from, to, output string, ignore []string, last bool, commits []string, unstaged, staged, mr bool) {
	verbose := viper.GetBool("verbose")

	printAnalysisHeader(verbose)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
	gitClient := validateGitRepository(verbose)

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞
	analysisType := determineAnalysisType(last, commits, from, to, unstaged, staged, mr)

	// –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
	changes := getChangesForAnalysis(gitClient, analysisType, from, to, commits, unstaged, staged, mr, verbose)

	if len(changes) == 0 {
		fmt.Println("‚úÖ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
		return
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
	results := performAnalysis(changes, verbose)

	// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	printAnalysisResults(results, analysisType, verbose)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª
	if output != "" {
		saveAnalysisResults(results, output, verbose)
	}

	fmt.Println("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
}

// printAnalysisHeader –≤—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–Ω–∞–ª–∏–∑–∞
func printAnalysisHeader(verbose bool) {
	fmt.Println("üöÄ –ó–∞–ø—É—Å–∫ AI-–∞–Ω–∞–ª–∏–∑–∞...")
	fmt.Printf("–ú–æ–¥–µ–ª—å: %s\n", viper.GetString("ollama.default_model"))

	if verbose {
		fmt.Println("üîç –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω")
		printAnalysisSettings()
	}
}

// printAnalysisSettings –≤—ã–≤–æ–¥–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
func printAnalysisSettings() {
	fmt.Printf("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞:\n")
	fmt.Printf("  - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: %t\n", viper.GetBool("analysis.enable_quality"))
	fmt.Printf("  - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: %t\n", viper.GetBool("analysis.enable_architecture"))
	fmt.Printf("  - –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: %t\n", viper.GetBool("analysis.enable_security"))
	fmt.Printf("  - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: %s\n", viper.GetString("analysis.max_file_size"))
}

// validateGitRepository –ø—Ä–æ–≤–µ—Ä—è–µ—Ç git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
func validateGitRepository(verbose bool) *git.Client {
	if verbose {
		fmt.Println("üîç –ü—Ä–æ–≤–µ—Ä—è—é git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...")
	}

	gitClient := git.NewClient()
	if !gitClient.IsRepository() {
		fmt.Println("‚ùå Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.")
		os.Exit(1)
	}

	if verbose {
		fmt.Println("‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–π–¥–µ–Ω")
	}

	return gitClient
}

// AnalysisType —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞
type AnalysisType string

const (
	AnalysisLastCommit      AnalysisType = "last_commit"
	AnalysisSpecificCommits AnalysisType = "specific_commits"
	AnalysisRange           AnalysisType = "range"
	AnalysisUnstaged        AnalysisType = "unstaged"
	AnalysisStaged          AnalysisType = "staged"
	AnalysisMR              AnalysisType = "merge_request"
	AnalysisCurrent         AnalysisType = "current"
)

// determineAnalysisType –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞
func determineAnalysisType(last bool, commits []string, from, to string, unstaged, staged, mr bool) AnalysisType {
	if last {
		return AnalysisLastCommit
	}
	if len(commits) > 0 {
		return AnalysisSpecificCommits
	}
	if from != "" && to != "" {
		return AnalysisRange
	}
	if unstaged {
		return AnalysisUnstaged
	}
	if staged {
		return AnalysisStaged
	}
	if mr {
		return AnalysisMR
	}
	return AnalysisCurrent
}

// ChangeInfo –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
type ChangeInfo struct {
	Type        AnalysisType
	Identifier  string
	Diff        string
	Description string
}

// getChangesForAnalysis –ø–æ–ª—É—á–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
func getChangesForAnalysis(gitClient *git.Client, analysisType AnalysisType, from, to string, commits []string, unstaged, staged, mr bool, verbose bool) []ChangeInfo {
	var changes []ChangeInfo

	if verbose {
		fmt.Println("üìù –ü–æ–ª—É—á–∞—é –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
	}

	switch analysisType {
	case AnalysisLastCommit:
		changes = getLastCommitChanges(gitClient, verbose)
	case AnalysisSpecificCommits:
		changes = getSpecificCommitsChanges(gitClient, commits, verbose)
	case AnalysisRange:
		changes = getRangeChanges(gitClient, from, to, verbose)
	case AnalysisUnstaged:
		changes = getUnstagedChanges(gitClient, verbose)
	case AnalysisStaged:
		changes = getStagedChanges(gitClient, verbose)
	case AnalysisMR:
		changes = getMRChanges(gitClient, verbose)
	case AnalysisCurrent:
		changes = getCurrentChanges(gitClient, verbose)
	}

	if verbose {
		fmt.Printf("üìÑ –ù–∞–π–¥–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: %d\n", len(changes))
	}

	return changes
}

// getLastCommitChanges –ø–æ–ª—É—á–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
func getLastCommitChanges(gitClient *git.Client, verbose bool) []ChangeInfo {
	lastCommit, err := gitClient.GetLastCommit()
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞: %v\n", err)
		os.Exit(1)
	}

	fmt.Printf("–ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞: %s\n", lastCommit)

	diff, err := gitClient.GetDiff(lastCommit, lastCommit+"~1")
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è diff: %v\n", err)
		os.Exit(1)
	}

	return []ChangeInfo{{
		Type:        AnalysisLastCommit,
		Identifier:  lastCommit,
		Diff:        diff,
		Description: fmt.Sprintf("–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: %s", lastCommit),
	}}
}

// getSpecificCommitsChanges –ø–æ–ª—É—á–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤
func getSpecificCommitsChanges(gitClient *git.Client, commits []string, verbose bool) []ChangeInfo {
	var changes []ChangeInfo

	for _, commit := range commits {
		fmt.Printf("–ê–Ω–∞–ª–∏–∑ –∫–æ–º–º–∏—Ç–∞: %s\n", commit)

		diff, err := gitClient.GetDiff(commit, commit+"~1")
		if err != nil {
			fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è diff –¥–ª—è –∫–æ–º–º–∏—Ç–∞ %s: %v\n", commit, err)
			continue
		}

		changes = append(changes, ChangeInfo{
			Type:        AnalysisSpecificCommits,
			Identifier:  commit,
			Diff:        diff,
			Description: fmt.Sprintf("–ö–æ–º–º–∏—Ç: %s", commit),
		})
	}

	return changes
}

// getRangeChanges –ø–æ–ª—É—á–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
func getRangeChanges(gitClient *git.Client, from, to string, verbose bool) []ChangeInfo {
	fmt.Printf("–ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—Ç %s –¥–æ %s\n", from, to)

	diff, err := gitClient.GetDiff(from, to)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è diff: %v\n", err)
		os.Exit(1)
	}

	return []ChangeInfo{{
		Type:        AnalysisRange,
		Identifier:  fmt.Sprintf("%s..%s", from, to),
		Diff:        diff,
		Description: fmt.Sprintf("–î–∏–∞–ø–∞–∑–æ–Ω: %s..%s", from, to),
	}}
}

// getUnstagedChanges –ø–æ–ª—É—á–∞–µ—Ç –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
func getUnstagedChanges(gitClient *git.Client, verbose bool) []ChangeInfo {
	fmt.Println("–ê–Ω–∞–ª–∏–∑ –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π")

	diff, err := gitClient.GetUnstagedDiff()
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π: %v\n", err)
		os.Exit(1)
	}

	return []ChangeInfo{{
		Type:        AnalysisUnstaged,
		Identifier:  "unstaged",
		Diff:        diff,
		Description: "–ù–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è",
	}}
}

// getStagedChanges –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –∫ –∫–æ–º–º–∏—Ç—É –∏–∑–º–µ–Ω–µ–Ω–∏—è
func getStagedChanges(gitClient *git.Client, verbose bool) []ChangeInfo {
	fmt.Println("–ê–Ω–∞–ª–∏–∑ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫ –∫–æ–º–º–∏—Ç—É –∏–∑–º–µ–Ω–µ–Ω–∏–π")

	diff, err := gitClient.GetStagedDiff()
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π: %v\n", err)
		os.Exit(1)
	}

	return []ChangeInfo{{
		Type:        AnalysisStaged,
		Identifier:  "staged",
		Diff:        diff,
		Description: "–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –∫ –∫–æ–º–º–∏—Ç—É –∏–∑–º–µ–Ω–µ–Ω–∏—è",
	}}
}

// getMRChanges –ø–æ–ª—É—á–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è Merge Request
func getMRChanges(gitClient *git.Client, verbose bool) []ChangeInfo {
	fmt.Println("–ê–Ω–∞–ª–∏–∑ Merge Request")

	// –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –≤–µ—Ç–∫—É (–æ–±—ã—á–Ω–æ main –∏–ª–∏ master)
	mainBranch := gitClient.GetMainBranch()
	if mainBranch == "" {
		mainBranch = "main"
	}

	currentBranch, err := gitClient.GetCurrentBranch()
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–∏: %v\n", err)
		os.Exit(1)
	}

	fmt.Printf("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ç–∫–∏ %s —Å %s\n", currentBranch, mainBranch)

	diff, err := gitClient.GetDiff(mainBranch, currentBranch)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è diff –¥–ª—è MR: %v\n", err)
		os.Exit(1)
	}

	return []ChangeInfo{{
		Type:        AnalysisMR,
		Identifier:  fmt.Sprintf("%s..%s", mainBranch, currentBranch),
		Diff:        diff,
		Description: fmt.Sprintf("Merge Request: %s ‚Üí %s", currentBranch, mainBranch),
	}}
}

// getCurrentChanges –ø–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
func getCurrentChanges(gitClient *git.Client, verbose bool) []ChangeInfo {
	fmt.Println("–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π")

	diff, err := gitClient.GetStatus()
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: %v\n", err)
		os.Exit(1)
	}

	return []ChangeInfo{{
		Type:        AnalysisCurrent,
		Identifier:  "current",
		Diff:        diff,
		Description: "–¢–µ–∫—É—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è",
	}}
}

// performAnalysis –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
func performAnalysis(changes []ChangeInfo, verbose bool) []*types.CodeAnalysisResult {
	var results []*types.CodeAnalysisResult

	for i, change := range changes {
		if verbose {
			fmt.Printf("üîÑ [%d/%d] –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é: %s\n", i+1, len(changes), change.Description)
		}

		if change.Diff == "" {
			if verbose {
				fmt.Printf("   ‚ö†Ô∏è  –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n")
			}
			continue
		}

		if verbose {
			fmt.Printf("   üìÑ –†–∞–∑–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π: %d —Å–∏–º–≤–æ–ª–æ–≤\n", len(change.Diff))
			fmt.Printf("   üß† –ó–∞–ø—É—Å–∫–∞—é AI-–∞–Ω–∞–ª–∏–∑...\n")
		}

		// –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
		result := analyzeChange(change, verbose)
		if result != nil {
			result.File = change.Identifier
			results = append(results, result)
		}

		if verbose {
			fmt.Printf("   ‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω\n")
		}
	}

	return results
}

// analyzeChange –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
func analyzeChange(change ChangeInfo, verbose bool) *types.CodeAnalysisResult {
	var results []*types.CodeAnalysisResult

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ç–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞ –≤–∫–ª—é—á–µ–Ω—ã
	if viper.GetBool("analysis.enable_quality") {
		qualityResult := analyzeWithQuality(change.Diff, change.Description, verbose)
		if qualityResult != nil {
			results = append(results, qualityResult)
		}
	}

	if viper.GetBool("analysis.enable_architecture") {
		archResult := analyzeWithArchitecture(change.Diff, change.Description, verbose)
		if archResult != nil {
			results = append(results, archResult)
		}
	}

	if viper.GetBool("analysis.enable_security") {
		securityResult := analyzeWithSecurity(change.Diff, change.Description, verbose)
		if securityResult != nil {
			results = append(results, securityResult)
		}
	}

	// –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º nil
	if len(results) == 0 {
		return nil
	}

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ–¥–∏–Ω
	return mergeAnalysisResults(results, change.Description)
}

// analyzeWithQuality –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å –ø–æ–º–æ—â—å—é –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞
func analyzeWithQuality(diff, description string, verbose bool) *types.CodeAnalysisResult {
	qualityAnalyzer := analyzer.NewQualityAnalyzer()
	result, err := qualityAnalyzer.Analyze(diff, fmt.Sprintf("Quality analysis of %s", description))
	if err != nil {
		if verbose {
			fmt.Printf("   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞: %v\n", err)
		}
		return nil
	}
	return result
}

// analyzeWithArchitecture –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å –ø–æ–º–æ—â—å—é –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
func analyzeWithArchitecture(diff, description string, verbose bool) *types.CodeAnalysisResult {
	archAnalyzer := analyzer.NewArchitectureAnalyzer()
	result, err := archAnalyzer.Analyze(diff, fmt.Sprintf("Architecture analysis of %s", description))
	if err != nil {
		if verbose {
			fmt.Printf("   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: %v\n", err)
		}
		return nil
	}
	return result
}

// analyzeWithSecurity –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å –ø–æ–º–æ—â—å—é –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
func analyzeWithSecurity(diff, description string, verbose bool) *types.CodeAnalysisResult {
	securityAnalyzer := analyzer.NewSecurityAnalyzer()
	result, err := securityAnalyzer.Analyze(diff, fmt.Sprintf("Security analysis of %s", description))
	if err != nil {
		if verbose {
			fmt.Printf("   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: %v\n", err)
		}
		return nil
	}
	return result
}

// mergeAnalysisResults –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
func mergeAnalysisResults(results []*types.CodeAnalysisResult, description string) *types.CodeAnalysisResult {
	if len(results) == 1 {
		return results[0]
	}

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã
	var allIssues []types.Issue
	totalScore := 0

	for _, result := range results {
		allIssues = append(allIssues, result.Issues...)
		totalScore += result.Score
	}

	// –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É
	avgScore := totalScore / len(results)

	return &types.CodeAnalysisResult{
		Issues:    allIssues,
		Score:     avgScore,
		File:      description,
		Timestamp: results[0].Timestamp, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	}
}

// printAnalysisResults –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
func printAnalysisResults(results []*types.CodeAnalysisResult, analysisType AnalysisType, verbose bool) {
	if len(results) == 0 {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
		return
	}

	fmt.Printf("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ (%s):\n", getAnalysisTypeDescription(analysisType))

	for _, result := range results {
		fmt.Printf("\nüìÅ %s:\n", result.File)
		fmt.Printf("   –û—Ü–µ–Ω–∫–∞: %d/100\n", result.Score)
		fmt.Printf("   –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: %d\n", len(result.Issues))

		if verbose {
			fmt.Printf("   –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞: %s\n", result.Timestamp.Format("2006-01-02 15:04:05"))
		}

		if len(result.Issues) > 0 {
			printIssues(result.Issues, verbose)
		} else {
			fmt.Printf("   ‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n")
		}
	}

	// –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	printOverallStatistics(results, verbose)
}

// getAnalysisTypeDescription –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏–∑–∞
func getAnalysisTypeDescription(analysisType AnalysisType) string {
	switch analysisType {
	case AnalysisLastCommit:
		return "–ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç"
	case AnalysisSpecificCommits:
		return "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ–º–º–∏—Ç—ã"
	case AnalysisRange:
		return "–¥–∏–∞–ø–∞–∑–æ–Ω –∫–æ–º–º–∏—Ç–æ–≤"
	case AnalysisUnstaged:
		return "–Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
	case AnalysisStaged:
		return "–ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
	case AnalysisMR:
		return "Merge Request"
	case AnalysisCurrent:
		return "—Ç–µ–∫—É—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
	default:
		return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
	}
}

// printIssues –≤—ã–≤–æ–¥–∏—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
func printIssues(issues []types.Issue, verbose bool) {
	for i, issue := range issues {
		if verbose {
			// –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ —Å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º–∏ –º–æ–¥–µ–ª–∏
			fmt.Printf("\n   %d. [%s] %s (—Å—Ç—Ä–æ–∫–∞ %d):\n", i+1, strings.ToUpper(issue.Severity), issue.Type, issue.Line)
			fmt.Printf("      üí¨ –ü—Ä–æ–±–ª–µ–º–∞: %s\n", issue.Message)
			if issue.Suggestion != "" {
				fmt.Printf("      üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: %s\n", issue.Suggestion)
			}
			if issue.Reasoning != "" {
				fmt.Printf("      üß† %s\n", issue.Reasoning)
			}
		} else {
			// –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–∞ –∏ —Å—Ç—Ä–æ–∫–∞
			if issue.Line > 0 {
				fmt.Printf("\n   %d. [%s] %s (—Å—Ç—Ä–æ–∫–∞ %d): %s\n", i+1, strings.ToUpper(issue.Severity), issue.Type, issue.Line, issue.Message)
			} else {
				fmt.Printf("\n   %d. [%s] %s: %s\n", i+1, strings.ToUpper(issue.Severity), issue.Type, issue.Message)
			}
		}
	}
}

// printOverallStatistics –≤—ã–≤–æ–¥–∏—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
func printOverallStatistics(results []*types.CodeAnalysisResult, verbose bool) {
	if len(results) == 0 {
		return
	}

	totalScore := 0
	totalIssues := 0

	for _, result := range results {
		totalScore += result.Score
		totalIssues += len(result.Issues)
	}

	avgScore := totalScore / len(results)

	fmt.Printf("\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n")
	fmt.Printf("  –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: %d\n", len(results))
	fmt.Printf("  –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: %d/100\n", avgScore)
	fmt.Printf("  –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: %d\n", totalIssues)

	if verbose {
		fmt.Printf("  –û–±—â–∏–π –±–∞–ª–ª: %d\n", totalScore)
		fmt.Printf("  –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: %.2f\n", float64(totalIssues)/float64(len(results)))
	}
}

// saveAnalysisResults —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–∞–π–ª
func saveAnalysisResults(results []*types.CodeAnalysisResult, output string, verbose bool) {
	if verbose {
		fmt.Printf("üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª: %s\n", output)
	}

	if err := saveResultsToFile(results, output); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %v\n", err)
	} else {
		fmt.Printf("\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: %s\n", output)
	}
}

// saveResultsToFile —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–∞–π–ª
func saveResultsToFile(results []*types.CodeAnalysisResult, filename string) error {
	data, err := json.MarshalIndent(results, "", "  ")
	if err != nil {
		return err
	}
	return os.WriteFile(filename, data, 0644)
}
