package cmd

import (
	"fmt"
	"os"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"miniReviewer/internal/ollama"
)

// TestOllamaCmd –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama
func TestOllamaCmd() *cobra.Command {
	return &cobra.Command{
		Use:   "test-ollama",
		Short: "–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama",
		Run: func(cmd *cobra.Command, args []string) {
			verbose := viper.GetBool("verbose")
			
			fmt.Println("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama...")
			
			host := viper.GetString("ollama.host")
			fmt.Printf("–•–æ—Å—Ç: %s\n", host)
			
			if verbose {
				fmt.Println("üîç –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω")
				fmt.Printf("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Ollama:\n")
				fmt.Printf("  - –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: %s\n", viper.GetString("ollama.default_model"))
				fmt.Printf("  - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: %d\n", viper.GetInt("ollama.max_tokens"))
				fmt.Printf("  - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %.2f\n", viper.GetFloat64("ollama.temperature"))
				fmt.Printf("  - –¢–∞–π–º–∞—É—Ç: %s\n", viper.GetString("ollama.timeout"))
			}
			
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama
			if verbose {
				fmt.Println("üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama...")
			}
			
			client := ollama.NewClient()
			if err := client.HealthCheck(); err != nil {
				fmt.Printf("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Ollama: %v\n", err)
				fmt.Println("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω: ollama serve")
				os.Exit(1)
			}
			
			fmt.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama —É—Å–ø–µ—à–Ω–æ!")
			
			if verbose {
				fmt.Println("üìã –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...")
				models, err := client.GetModels()
				if err != nil {
					fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: %v\n", err)
				} else {
					fmt.Printf("üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ (%d):\n", len(models))
					for i, model := range models {
						fmt.Printf("  %d. %s\n", i+1, model)
					}
				}
			}
			
			// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
			fmt.Println("üß† –¢–µ—Å—Ç–∏—Ä—É—é AI-–∑–∞–ø—Ä–æ—Å...")
			
			if verbose {
				fmt.Println("üìù –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...")
			}
			
			response, err := client.Generate("–°–∫–∞–∂–∏ '–ü—Ä–∏–≤–µ—Ç' –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ AI-–∑–∞–ø—Ä–æ—Å–∞: %v\n", err)
				os.Exit(1)
			}
			
			if verbose {
				fmt.Printf("üì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç (—Ä–∞–∑–º–µ—Ä: %d —Å–∏–º–≤–æ–ª–æ–≤)\n", len(response))
			}
			
			fmt.Printf("ü§ñ –û—Ç–≤–µ—Ç AI: %s\n", response)
			fmt.Println("‚úÖ Ollama —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
		},
	}
}
