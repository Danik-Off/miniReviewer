package cmd

import (
	"encoding/json"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"time"

	"miniReviewer/internal/analyzer"
	"miniReviewer/internal/filesystem"
	"miniReviewer/internal/types"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

// QualityCmd –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
func QualityCmd() *cobra.Command {
	var severity, output, path string
	var ignore []string

	cmd := &cobra.Command{
		Use:   "quality",
		Short: "AI-–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞",
		Long: `–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI (Ollama).
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å, –¥–ª–∏–Ω—É —Ñ—É–Ω–∫—Ü–∏–π, —Å—Ç–∏–ª—å –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è.
–ú–æ–∂–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã, —Ç–∞–∫ –∏ —Ü–µ–ª—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.`,
		Run: func(cmd *cobra.Command, args []string) {
			verbose := viper.GetBool("verbose")

			fmt.Println("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞...")
			fmt.Printf("–ú–æ–¥–µ–ª—å: %s\n", viper.GetString("ollama.default_model"))
			fmt.Printf("–£—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏: %s\n", severity)

			if verbose {
				fmt.Println("üîç –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω")
				fmt.Printf("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:\n")
				fmt.Printf("  - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: %d\n", viper.GetInt("quality.max_complexity"))
				fmt.Printf("  - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏: %d —Å—Ç—Ä–æ–∫\n", viper.GetInt("quality.max_function_length"))
				fmt.Printf("  - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ñ–∞–π–ª–∞: %d —Å—Ç—Ä–æ–∫\n", viper.GetInt("quality.max_file_length"))
				fmt.Printf("  - AI-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: %t\n", viper.GetBool("quality.enable_ai_suggestions"))
			}

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
			analysisPath := "."
			if path != "" {
				analysisPath = path
			}

			if verbose {
				fmt.Printf("üìÅ –ü—É—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: %s\n", analysisPath)
			}

			// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–ª–∏ —Ñ–∞–π–ª
			ignorePatterns := viper.GetStringSlice("analysis.ignore_patterns")
			ignorePatterns = append(ignorePatterns, ignore...)

			if verbose {
				fmt.Printf("üîç –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: %v\n", ignorePatterns)
				fmt.Printf("üìÅ –°–∫–∞–Ω–∏—Ä—É—é %s –Ω–∞ Go —Ñ–∞–π–ª—ã...\n", analysisPath)
			}

			scanner := filesystem.NewScanner(ignorePatterns, 0)

			var files []string
			var err error

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å —Ñ–∞–π–ª–æ–º
			if fileInfo, statErr := os.Stat(analysisPath); statErr == nil && !fileInfo.IsDir() {
				// –≠—Ç–æ —Ñ–∞–π–ª - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–∞–π–ª
				ext := strings.ToLower(filepath.Ext(analysisPath))
				supportedExtensions := []string{".go", ".js", ".ts", ".py", ".java", ".cpp", ".rs", ".kt"}

				isSupported := false
				for _, supportedExt := range supportedExtensions {
					if ext == supportedExt {
						isSupported = true
						break
					}
				}

				if isSupported {
					files = []string{analysisPath}
				} else {
					fmt.Printf("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º: %s\n", analysisPath)
					fmt.Printf("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: %v\n", supportedExtensions)
					os.Exit(1)
				}
			} else {
				// –≠—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è - –∏—â–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã
				files, err = scanner.FindSupportedFiles(analysisPath)
			}
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: %v\n", err)
				os.Exit(1)
			}

			if len(files) == 0 {
				fmt.Println("‚ùå Go —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
				os.Exit(1)
			}

			fmt.Printf("–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: %d\n", len(files))

			if verbose {
				fmt.Println("üìã –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
				for i, file := range files {
					fmt.Printf("  %d. %s\n", i+1, file)
				}
				fmt.Println()
			}

			var totalScore int
			var totalIssues int
			var results []*types.CodeAnalysisResult

			codeAnalyzer := analyzer.NewCodeAnalyzer()

			for i, file := range files {
				if verbose {
					fmt.Printf("üìù [%d/%d] –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é: %s\n", i+1, len(files), file)
				} else {
					fmt.Printf("üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é: %s\n", file)
				}

				content, err := os.ReadFile(file)
				if err != nil {
					fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è %s: %v\n", file, err)
					continue
				}

				if verbose {
					fmt.Printf("   üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: %d –±–∞–π—Ç\n", len(content))
					fmt.Printf("   üß† –ó–∞–ø—É—Å–∫–∞—é AI-–∞–Ω–∞–ª–∏–∑...\n")
				}

				// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
				ext := strings.ToLower(filepath.Ext(file))
				var result *types.CodeAnalysisResult

				if ext == ".js" || ext == ".ts" {
					// –î–ª—è JavaScript —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
					jsIssues := codeAnalyzer.AnalyzeJavaScript(string(content), file)

					if verbose {
						// –° —Ñ–ª–∞–≥–æ–º verbose —Ç–∞–∫–∂–µ –∑–∞–ø—É—Å–∫–∞–µ–º AI-–∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
						aiResult, err := codeAnalyzer.AnalyzeCode(string(content), fmt.Sprintf("Quality analysis of JavaScript file %s", file))
						if err == nil && len(aiResult.Issues) > 0 {
							// –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å AI-—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º–∏
							for i := range jsIssues {
								// –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é AI-–ø—Ä–æ–±–ª–µ–º—É –ø–æ —Ç–∏–ø—É –∏ —Å—Ç—Ä–æ–∫–µ
								for _, aiIssue := range aiResult.Issues {
									if aiIssue.Type == jsIssues[i].Type && aiIssue.Line == jsIssues[i].Line {
										jsIssues[i].Reasoning = aiIssue.Reasoning
										break
									}
								}
							}
						}
					}

					result = &types.CodeAnalysisResult{
						File:      file,
						Issues:    jsIssues,
						Score:     100 - len(jsIssues)*10, // –û—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–±–ª–µ–º
						Timestamp: time.Now(),
					}
				} else {
					// –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º AI-–∞–Ω–∞–ª–∏–∑
					aiResult, err := codeAnalyzer.AnalyzeCode(string(content), fmt.Sprintf("Quality analysis of %s", file))
					if err != nil {
						fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ %s: %v\n", file, err)
						continue
					}
					result = aiResult
				}

				if verbose {
					fmt.Printf("   ‚úÖ AI-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω (–æ—Ü–µ–Ω–∫–∞: %d/100, –ø—Ä–æ–±–ª–µ–º: %d)\n", result.Score, len(result.Issues))
				}

				result.File = file
				results = append(results, result)
				totalScore += result.Score
				totalIssues += len(result.Issues)
			}

			// –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
			if len(results) > 0 {
				fmt.Printf("\nüîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:\n")
				for _, result := range results {
					if len(result.Issues) > 0 {
						fmt.Printf("\nüìÅ %s:\n", result.File)
						for _, issue := range result.Issues {
							if verbose {
								// –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ —Å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º–∏ –º–æ–¥–µ–ª–∏
								fmt.Printf("  ‚ö†Ô∏è  [%s] %s (—Å—Ç—Ä–æ–∫–∞ %d):\n", strings.ToUpper(issue.Severity), issue.Type, issue.Line)
								fmt.Printf("     üí¨ %s\n", issue.Message)
								fmt.Printf("     üí° %s\n", issue.Suggestion)
								if issue.Reasoning != "" {
									fmt.Printf("     üß† %s\n", issue.Reasoning)
								}
							} else {
								// –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–∞ –∏ —Å—Ç—Ä–æ–∫–∞
								if issue.Line > 0 {
									fmt.Printf("  ‚ö†Ô∏è  [%s] %s (—Å—Ç—Ä–æ–∫–∞ %d): %s\n", strings.ToUpper(issue.Severity), issue.Type, issue.Line, issue.Message)
								} else {
									fmt.Printf("  ‚ö†Ô∏è  [%s] %s: %s\n", strings.ToUpper(issue.Severity), issue.Type, issue.Message)
								}
							}
						}
					} else {
						if verbose {
							fmt.Printf("\n‚úÖ %s: –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n", result.File)
						}
					}
				}
			}

			if len(results) > 0 {
				avgScore := totalScore / len(results)
				fmt.Printf("\nüìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n")
				fmt.Printf("–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: %d/100\n", avgScore)
				fmt.Printf("–í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: %d\n", totalIssues)
				fmt.Printf("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: %d\n", len(results))

				if verbose {
					fmt.Printf("\nüìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n")
					fmt.Printf("  - –û–±—â–∏–π –±–∞–ª–ª: %d\n", totalScore)
					fmt.Printf("  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: %d\n", len(results))
					fmt.Printf("  - –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: %.2f\n", float64(totalScore)/float64(len(results)))
					fmt.Printf("  - –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º –Ω–∞ —Ñ–∞–π–ª: %.2f\n", float64(totalIssues)/float64(len(results)))
				}
			}

			if len(ignore) > 0 {
				fmt.Printf("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: %v\n", ignore)
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
			if output != "" {
				if verbose {
					fmt.Printf("üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª: %s\n", output)
				}

				if err := saveResultsToFile(results, output); err != nil {
					fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %v\n", err)
				} else {
					fmt.Printf("\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: %s\n", output)
				}
			}

			fmt.Println("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
		},
	}

	cmd.Flags().StringVar(&path, "path", ".", "–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –ø–∞–ø–∫–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
	cmd.Flags().StringVar(&severity, "severity", "medium", "—É—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ (low, medium, high, critical)")
	cmd.Flags().StringVarP(&output, "output", "o", "", "—Ñ–∞–π–ª –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
	cmd.Flags().StringArrayVar(&ignore, "ignore", []string{}, "–ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è")

	return cmd
}

// saveResultsToFile —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–∞–π–ª
func saveResultsToFile(results []*types.CodeAnalysisResult, filename string) error {
	data, err := json.MarshalIndent(results, "", "  ")
	if err != nil {
		return err
	}
	return os.WriteFile(filename, data, 0644)
}
