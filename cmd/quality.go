package cmd

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"miniReviewer/internal/analyzer"
	"miniReviewer/internal/filesystem"
	"miniReviewer/internal/types"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

// QualityCmd –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
func QualityCmd() *cobra.Command {
	var severity, output, path string
	var ignore []string

	cmd := &cobra.Command{
		Use:   "quality",
		Short: "AI-–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞",
		Long: `–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI (Ollama).
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å, –¥–ª–∏–Ω—É —Ñ—É–Ω–∫—Ü–∏–π, —Å—Ç–∏–ª—å –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è.
–ú–æ–∂–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã, —Ç–∞–∫ –∏ —Ü–µ–ª—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.`,
		Run: func(cmd *cobra.Command, args []string) {
			runQualityAnalysis(severity, output, path, ignore)
		},
	}

	cmd.Flags().StringVar(&path, "path", ".", "–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –ø–∞–ø–∫–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
	cmd.Flags().StringVar(&severity, "severity", "medium", "—É—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ (low, medium, high, critical)")
	cmd.Flags().StringVarP(&output, "output", "o", "", "—Ñ–∞–π–ª –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
	cmd.Flags().StringArrayVar(&ignore, "ignore", []string{}, "–ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è")

	return cmd
}

// runQualityAnalysis –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
func runQualityAnalysis(severity, output, path string, ignore []string) {
	verbose := viper.GetBool("verbose")

	printQualityHeader(severity, verbose)

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
	analysisPath := getAnalysisPath(path)
	if verbose {
		fmt.Printf("üìÅ –ü—É—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: %s\n", analysisPath)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
	files, err := getFilesForAnalysis(analysisPath, ignore, verbose)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: %v\n", err)
		os.Exit(1)
	}

	if len(files) == 0 {
		fmt.Println("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		os.Exit(1)
	}

	fmt.Printf("–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: %d\n", len(files))

	if verbose {
		analyzer.PrintFileList(files)
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
	results := analyzeFiles(files, verbose)

	// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	printQualityResults(results, verbose)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª
	if output != "" {
		saveQualityResults(results, output, verbose)
	}

	fmt.Println("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
}

// printQualityHeader –≤—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞
func printQualityHeader(severity string, verbose bool) {
	fmt.Println("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞...")
	fmt.Printf("–ú–æ–¥–µ–ª—å: %s\n", viper.GetString("ollama.default_model"))
	fmt.Printf("–£—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏: %s\n", severity)

	if verbose {
		fmt.Println("üîç –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω")
		printQualitySettings()
	}
}

// printQualitySettings –≤—ã–≤–æ–¥–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
func printQualitySettings() {
	fmt.Printf("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:\n")
	fmt.Printf("  - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: %d\n", viper.GetInt("quality.max_complexity"))
	fmt.Printf("  - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏: %d —Å—Ç—Ä–æ–∫\n", viper.GetInt("quality.max_function_length"))
	fmt.Printf("  - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ñ–∞–π–ª–∞: %d —Å—Ç—Ä–æ–∫\n", viper.GetInt("quality.max_file_length"))
	fmt.Printf("  - AI-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: %t\n", viper.GetBool("quality.enable_ai_suggestions"))
}

// getAnalysisPath –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
func getAnalysisPath(path string) string {
	if path != "" {
		return path
	}
	return "."
}

// getFilesForAnalysis –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
func getFilesForAnalysis(analysisPath string, ignore []string, verbose bool) ([]string, error) {
	ignorePatterns := viper.GetStringSlice("analysis.ignore_patterns")
	ignorePatterns = append(ignorePatterns, ignore...)

	if verbose {
		fmt.Printf("üîç –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: %v\n", ignorePatterns)
		fmt.Printf("üìÅ –°–∫–∞–Ω–∏—Ä—É—é %s –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã...\n", analysisPath)
	}

	scanner := filesystem.NewScanner(ignorePatterns, 0)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å —Ñ–∞–π–ª–æ–º
	if fileInfo, statErr := os.Stat(analysisPath); statErr == nil && !fileInfo.IsDir() {
		return getSingleFileForAnalysis(analysisPath)
	}

	// –≠—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è - –∏—â–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã
	return scanner.FindSupportedFiles(analysisPath)
}

// getSingleFileForAnalysis –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
func getSingleFileForAnalysis(filePath string) ([]string, error) {
	ext := strings.ToLower(filepath.Ext(filePath))
	supportedExtensions := []string{".go", ".js", ".ts", ".py", ".java", ".cpp", ".rs", ".kt"}

	for _, supportedExt := range supportedExtensions {
		if ext == supportedExt {
			return []string{filePath}, nil
		}
	}

	return nil, fmt.Errorf("—Ñ–∞–π–ª %s –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: %v", filePath, supportedExtensions)
}

// analyzeFiles –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
func analyzeFiles(files []string, verbose bool) []*types.CodeAnalysisResult {
	var results []*types.CodeAnalysisResult
	qualityAnalyzer := analyzer.NewQualityAnalyzer()

	for i, file := range files {
		if verbose {
			fmt.Printf("üìù [%d/%d] –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é: %s\n", i+1, len(files), file)
		} else {
			fmt.Printf("üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é: %s\n", file)
		}

		result := analyzeSingleFile(file, qualityAnalyzer, verbose)
		if result != nil {
			results = append(results, result)
		}
	}

	return results
}

// analyzeSingleFile –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª
func analyzeSingleFile(file string, analyzer *analyzer.QualityAnalyzer, verbose bool) *types.CodeAnalysisResult {
	content, err := os.ReadFile(file)
	if err != nil {
		fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è %s: %v\n", file, err)
		return nil
	}

	if verbose {
		fmt.Printf("   üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: %d –±–∞–π—Ç\n", len(content))
		fmt.Printf("   üß† –ó–∞–ø—É—Å–∫–∞—é AI-–∞–Ω–∞–ª–∏–∑...\n")
	}

	ext := strings.ToLower(filepath.Ext(file))
	context := fmt.Sprintf("Quality analysis of %s file %s", ext, file)

	result, err := analyzer.Analyze(string(content), context)
	if err != nil {
		fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ %s: %v\n", file, err)
		return nil
	}

	if verbose {
		fmt.Printf("   ‚úÖ AI-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω (–æ—Ü–µ–Ω–∫–∞: %d/100, –ø—Ä–æ–±–ª–µ–º: %d)\n", result.Score, len(result.Issues))
	}

	result.File = file
	return result
}

// printQualityResults –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞
func printQualityResults(results []*types.CodeAnalysisResult, verbose bool) {
	if len(results) == 0 {
		fmt.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
		return
	}

	// –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
	printQualityIssues(results, verbose)

	// –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	analyzer.PrintStatistics(results, verbose)
}

// printQualityIssues –≤—ã–≤–æ–¥–∏—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∫–∞—á–µ—Å—Ç–≤–∞
func printQualityIssues(results []*types.CodeAnalysisResult, verbose bool) {
	var hasIssues bool
	for _, result := range results {
		if len(result.Issues) > 0 {
			hasIssues = true
			break
		}
	}

	if !hasIssues {
		fmt.Println("\n‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤–æ –≤—Å–µ—Ö —Ñ–∞–π–ª–∞—Ö")
		return
	}

	fmt.Printf("\nüîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:\n")
	for _, result := range results {
		if len(result.Issues) > 0 {
			analyzer.PrintFileIssues(result, verbose)
		} else if verbose {
			fmt.Printf("\n‚úÖ %s: –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n", result.File)
		}
	}
}

// printFileIssues –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
func printFileIssues(result *types.CodeAnalysisResult, verbose bool) {
	fmt.Printf("\nüìÅ %s:\n", result.File)
	for _, issue := range result.Issues {
		if verbose {
			// –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ —Å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º–∏ –º–æ–¥–µ–ª–∏
			fmt.Printf("  ‚ö†Ô∏è  [%s] %s (—Å—Ç—Ä–æ–∫–∞ %d):\n", strings.ToUpper(issue.Severity), issue.Type, issue.Line)
			fmt.Printf("     üí¨ %s\n", issue.Message)
			fmt.Printf("     üí° %s\n", issue.Suggestion)
			if issue.Reasoning != "" {
				fmt.Printf("     üß† %s\n", issue.Reasoning)
			}
		} else {
			// –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–∞ –∏ —Å—Ç—Ä–æ–∫–∞
			if issue.Line > 0 {
				fmt.Printf("  ‚ö†Ô∏è  [%s] %s (—Å—Ç—Ä–æ–∫–∞ %d): %s\n", strings.ToUpper(issue.Severity), issue.Type, issue.Line, issue.Message)
			} else {
				fmt.Printf("  ‚ö†Ô∏è  [%s] %s: %s\n", strings.ToUpper(issue.Severity), issue.Type, issue.Message)
			}
		}
	}
}

// printStatistics –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞
func printStatistics(results []*types.CodeAnalysisResult, verbose bool) {
	totalScore := 0
	totalIssues := 0

	for _, result := range results {
		totalScore += result.Score
		totalIssues += len(result.Issues)
	}

	avgScore := totalScore / len(results)

	fmt.Printf("\nüìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n")
	fmt.Printf("–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: %d/100\n", avgScore)
	fmt.Printf("–í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: %d\n", totalIssues)
	fmt.Printf("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: %d\n", len(results))

	if verbose {
		fmt.Printf("\nüìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n")
		fmt.Printf("  - –û–±—â–∏–π –±–∞–ª–ª: %d\n", totalScore)
		fmt.Printf("  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: %d\n", len(results))
		fmt.Printf("  - –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: %.2f\n", float64(totalScore)/float64(len(results)))
		fmt.Printf("  - –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º –Ω–∞ —Ñ–∞–π–ª: %.2f\n", float64(totalIssues)/float64(len(results)))
	}
}

// saveQualityResults —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤ —Ñ–∞–π–ª
func saveQualityResults(results []*types.CodeAnalysisResult, output string, verbose bool) {
	if verbose {
		fmt.Printf("üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª: %s\n", output)
	}

	if err := analyzer.SaveResultsToFile(results, output); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %v\n", err)
	} else {
		fmt.Printf("\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: %s\n", output)
	}
}
