package cmd

import (
	"encoding/json"
	"fmt"
	"os"

	"miniReviewer/internal/analyzer"
	"miniReviewer/internal/filesystem"
	"miniReviewer/internal/types"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

// QualityCmd –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
func QualityCmd() *cobra.Command {
	var severity, output string
	var ignore []string

	cmd := &cobra.Command{
		Use:   "quality",
		Short: "AI-–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞",
		Long: `–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI (Ollama).
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å, –¥–ª–∏–Ω—É —Ñ—É–Ω–∫—Ü–∏–π, —Å—Ç–∏–ª—å –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è.`,
		Run: func(cmd *cobra.Command, args []string) {
			fmt.Println("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞...")
			fmt.Printf("–ú–æ–¥–µ–ª—å: %s\n", viper.GetString("ollama.default_model"))
			fmt.Printf("–£—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏: %s\n", severity)

			// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
			ignorePatterns := viper.GetStringSlice("analysis.ignore_patterns")
			ignorePatterns = append(ignorePatterns, ignore...)

			scanner := filesystem.NewScanner(ignorePatterns, 0)
			files, err := scanner.FindGoFiles(".")
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: %v\n", err)
				os.Exit(1)
			}

			if len(files) == 0 {
				fmt.Println("‚ùå Go —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
				os.Exit(1)
			}

			fmt.Printf("–ù–∞–π–¥–µ–Ω–æ Go —Ñ–∞–π–ª–æ–≤: %d\n", len(files))

			var totalScore int
			var totalIssues int
			var results []*types.CodeAnalysisResult

			codeAnalyzer := analyzer.NewCodeAnalyzer()

			for _, file := range files {
				fmt.Printf("üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é: %s\n", file)

				content, err := os.ReadFile(file)
				if err != nil {
					fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è %s: %v\n", file, err)
					continue
				}

				result, err := codeAnalyzer.AnalyzeCode(string(content), fmt.Sprintf("Quality analysis of %s", file))
				if err != nil {
					fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ %s: %v\n", file, err)
					continue
				}

				result.File = file
				results = append(results, result)
				totalScore += result.Score
				totalIssues += len(result.Issues)
			}

			if len(results) > 0 {
				avgScore := totalScore / len(results)
				fmt.Printf("\nüìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n")
				fmt.Printf("–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: %d/100\n", avgScore)
				fmt.Printf("–í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: %d\n", totalIssues)
				fmt.Printf("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: %d\n", len(results))
			}

			if len(ignore) > 0 {
				fmt.Printf("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: %v\n", ignore)
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
			if output != "" {
				if err := saveResultsToFile(results, output); err != nil {
					fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %v\n", err)
				} else {
					fmt.Printf("\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: %s\n", output)
				}
			}

			fmt.Println("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
		},
	}

	cmd.Flags().StringVar(&severity, "severity", "medium", "—É—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ (low, medium, high, critical)")
	cmd.Flags().StringVarP(&output, "output", "o", "", "—Ñ–∞–π–ª –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
	cmd.Flags().StringArrayVar(&ignore, "ignore", []string{}, "–ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è")

	return cmd
}

// saveResultsToFile —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–∞–π–ª
func saveResultsToFile(results []*types.CodeAnalysisResult, filename string) error {
	data, err := json.MarshalIndent(results, "", "  ")
	if err != nil {
		return err
	}
	return os.WriteFile(filename, data, 0644)
}
