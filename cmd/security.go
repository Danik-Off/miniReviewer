package cmd

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"time"

	"miniReviewer/internal/analyzer"
	"miniReviewer/internal/filesystem"
	"miniReviewer/internal/types"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

// SecurityCmd –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
func SecurityCmd() *cobra.Command {
	var checkDeps, scanCode bool
	var output, path string

	cmd := &cobra.Command{
		Use:   "security",
		Short: "AI-–∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞",
		Long: `–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–¥ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI (Ollama).
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –∫–æ–¥ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
–ú–æ–∂–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã, —Ç–∞–∫ –∏ —Ü–µ–ª—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.`,
		Run: func(cmd *cobra.Command, args []string) {
			runSecurityAnalysis(checkDeps, scanCode, output, path)
		},
	}

	cmd.Flags().StringVar(&path, "path", ".", "–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –ø–∞–ø–∫–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
	cmd.Flags().BoolVar(&checkDeps, "check-dependencies", true, "–ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏")
	cmd.Flags().BoolVar(&scanCode, "scan-code", true, "—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
	cmd.Flags().StringVarP(&output, "output", "o", "", "—Ñ–∞–π–ª –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")

	return cmd
}

// runSecurityAnalysis –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
func runSecurityAnalysis(checkDeps, scanCode bool, output, path string) {
	verbose := viper.GetBool("verbose")

	printSecurityHeader(checkDeps, scanCode, verbose)

	if scanCode {
		// –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
		securityIssues := scanCodeForSecurityIssues(path, verbose)

		// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
		printSecurityResults(securityIssues, verbose)

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª
		if output != "" {
			saveSecurityResults(securityIssues, output, verbose)
		}
	}

	fmt.Println("‚úÖ –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
}

// printSecurityHeader –≤—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
func printSecurityHeader(checkDeps, scanCode bool, verbose bool) {
	fmt.Println("üîí –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
	fmt.Printf("–ú–æ–¥–µ–ª—å: %s\n", viper.GetString("ollama.default_model"))
	fmt.Printf("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: %t\n", checkDeps)
	fmt.Printf("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞: %t\n", scanCode)

	if verbose {
		fmt.Println("üîç –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω")
		printSecuritySettings()
	}
}

// printSecuritySettings –≤—ã–≤–æ–¥–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
func printSecuritySettings() {
	fmt.Printf("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n")
	fmt.Printf("  - –í–∫–ª—é—á–µ–Ω–æ: %t\n", viper.GetBool("security.enabled"))
	fmt.Printf("  - AI-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: %t\n", viper.GetBool("security.ai_vulnerability_scan"))
	fmt.Printf("  - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤: %t\n", viper.GetBool("security.check_secrets"))
	fmt.Printf("  - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: %t\n", viper.GetBool("security.check_permissions"))
}

// scanCodeForSecurityIssues —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –∫–æ–¥ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
func scanCodeForSecurityIssues(path string, verbose bool) []types.Issue {
	fmt.Println("üîç –°–∫–∞–Ω–∏—Ä—É—é –∫–æ–¥ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
	analysisPath := getSecurityAnalysisPath(path)
	if verbose {
		fmt.Printf("üìÅ –ü—É—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: %s\n", analysisPath)
		fmt.Println("üìÅ –ü–æ–∏—Å–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
	files, err := getSecurityFilesForAnalysis(analysisPath, verbose)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: %v\n", err)
		os.Exit(1)
	}

	if verbose {
		fmt.Printf("üìã –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: %d\n", len(files))
	}

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
	return analyzeFilesForSecurity(files, verbose)
}

// getSecurityAnalysisPath –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
func getSecurityAnalysisPath(path string) string {
	if path != "" {
		return path
	}
	return "."
}

// getSecurityFilesForAnalysis –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
func getSecurityFilesForAnalysis(analysisPath string, verbose bool) ([]string, error) {
	ignorePatterns := viper.GetStringSlice("analysis.ignore_patterns")
	scanner := filesystem.NewScanner(ignorePatterns, 0)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å —Ñ–∞–π–ª–æ–º
	if fileInfo, statErr := os.Stat(analysisPath); statErr == nil && !fileInfo.IsDir() {
		return getSingleSecurityFileForAnalysis(analysisPath)
	}

	// –≠—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è - –∏—â–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã
	return scanner.FindSupportedFiles(analysisPath)
}

// getSingleSecurityFileForAnalysis –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
func getSingleSecurityFileForAnalysis(filePath string) ([]string, error) {
	ext := strings.ToLower(filepath.Ext(filePath))
	supportedExtensions := []string{".go", ".js", ".ts", ".py", ".java", ".cpp", ".rs", ".kt"}

	for _, supportedExt := range supportedExtensions {
		if ext == supportedExt {
			return []string{filePath}, nil
		}
	}

	return nil, fmt.Errorf("—Ñ–∞–π–ª %s –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: %v", filePath, supportedExtensions)
}

// analyzeFilesForSecurity –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
func analyzeFilesForSecurity(files []string, verbose bool) []types.Issue {
	var securityIssues []types.Issue
	securityAnalyzer := analyzer.NewSecurityAnalyzer()

	for i, file := range files {
		if verbose {
			fmt.Printf("üîç [%d/%d] –°–∫–∞–Ω–∏—Ä—É—é: %s\n", i+1, len(files), file)
		}

		fileIssues := analyzeSingleFileForSecurity(file, securityAnalyzer, verbose)
		securityIssues = append(securityIssues, fileIssues...)
	}

	return securityIssues
}

// analyzeSingleFileForSecurity –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
func analyzeSingleFileForSecurity(file string, analyzer *analyzer.SecurityAnalyzer, verbose bool) []types.Issue {
	content, err := os.ReadFile(file)
	if err != nil {
		if verbose {
			fmt.Printf("   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: %v\n", err)
		}
		return []types.Issue{}
	}

	if verbose {
		fmt.Printf("   üìÑ –†–∞–∑–º–µ—Ä: %d –±–∞–π—Ç\n", len(content))
	}

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é AI
	aiResult, err := analyzer.Analyze(string(content), fmt.Sprintf("Security analysis of %s file", filepath.Ext(file)))
	if err != nil {
		if verbose {
			fmt.Printf("   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞: %v\n", err)
		}
		return []types.Issue{}
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–∑ AI-–∞–Ω–∞–ª–∏–∑–∞
	var securityIssues []types.Issue
	for _, aiIssue := range aiResult.Issues {
		if isSecurityIssue(aiIssue.Type) {
			// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
			aiIssue.File = file
			securityIssues = append(securityIssues, aiIssue)
		}
	}

	if verbose && len(aiResult.Issues) > 0 {
		fmt.Printf("   ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: %d\n", len(aiResult.Issues))
	}

	return securityIssues
}

// isSecurityIssue –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–æ–±–ª–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
func isSecurityIssue(issueType string) bool {
	securityTypes := []string{"security", "vulnerability", "injection", "xss", "sqli", "authentication", "authorization"}

	for _, securityType := range securityTypes {
		if issueType == securityType {
			return true
		}
	}

	return false
}

// printSecurityResults –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
func printSecurityResults(securityIssues []types.Issue, verbose bool) {
	fmt.Printf("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n")
	fmt.Printf("–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: %d\n", len(securityIssues))

	if verbose {
		printSecurityStatistics(securityIssues)
	}

	if len(securityIssues) > 0 {
		printSecurityIssues(securityIssues, verbose)
		printSecuritySummary(securityIssues, verbose)
	} else {
		fmt.Println("‚úÖ –ü—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
	}
}

// printSecurityStatistics –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
func printSecurityStatistics(securityIssues []types.Issue) {
	fmt.Printf("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–±–ª–µ–º:\n")
	issueTypes := make(map[string]int)
	severityCounts := make(map[string]int)

	for _, issue := range securityIssues {
		issueTypes[issue.Type]++
		severityCounts[issue.Severity]++
	}

	fmt.Printf("  –ü–æ —Ç–∏–ø–∞–º:\n")
	for issueType, count := range issueTypes {
		fmt.Printf("    - %s: %d\n", issueType, count)
	}

	fmt.Printf("  –ü–æ –≤–∞–∂–Ω–æ—Å—Ç–∏:\n")
	for severity, count := range severityCounts {
		fmt.Printf("    - %s: %d\n", severity, count)
	}
	fmt.Println()
}

// printSecurityIssues –≤—ã–≤–æ–¥–∏—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
func printSecurityIssues(securityIssues []types.Issue, verbose bool) {
	fmt.Printf("\nüîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n")

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã –ø–æ —Ç–∏–ø–∞–º
	issuesByType := make(map[string][]types.Issue)
	for _, issue := range securityIssues {
		issuesByType[issue.Type] = append(issuesByType[issue.Type], issue)
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Ç–∏–ø–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
	typePriority := []string{"security", "vulnerability", "injection", "xss", "sqli", "authentication", "authorization"}

	for _, issueType := range typePriority {
		if issues, exists := issuesByType[issueType]; exists {
			printSecurityIssueTypeGroup(issueType, issues, verbose)
		}
	}
}

// printSecurityIssueTypeGroup –≤—ã–≤–æ–¥–∏—Ç –≥—Ä—É–ø–ø—É –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞
func printSecurityIssueTypeGroup(issueType string, issues []types.Issue, verbose bool) {
	// –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
	typeEmoji := map[string]string{
		"security":       "üîí",
		"vulnerability":  "üí•",
		"injection":      "üíâ",
		"xss":            "üåê",
		"sqli":           "üóÑÔ∏è",
		"authentication": "üîê",
		"authorization":  "üö™",
	}

	emoji := typeEmoji[issueType]
	if emoji == "" {
		emoji = "‚ö†Ô∏è"
	}

	fmt.Printf("\n%s %s (%d –ø—Ä–æ–±–ª–µ–º):\n", emoji, strings.ToUpper(issueType), len(issues))

	for i, issue := range issues {
		printSecurityIssue(issue, verbose)

		// –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –ø—Ä–æ–±–ª–µ–º–∞–º–∏
		if i < len(issues)-1 {
			fmt.Println("     ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
		}
	}
}

// printSecurityIssue –≤—ã–≤–æ–¥–∏—Ç –æ–¥–Ω—É –ø—Ä–æ–±–ª–µ–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
func printSecurityIssue(issue types.Issue, verbose bool) {
	// –≠–º–æ–¥–∑–∏ –¥–ª—è –≤–∞–∂–Ω–æ—Å—Ç–∏
	severityEmoji := map[string]string{
		"critical": "üö®",
		"high":     "‚ö†Ô∏è",
		"medium":   "‚ö°",
		"low":      "üí°",
		"info":     "‚ÑπÔ∏è",
	}

	emoji := severityEmoji[issue.Severity]
	if emoji == "" {
		emoji = "‚ö†Ô∏è"
	}

	fmt.Printf("\n  %s [%s] %s\n", emoji, strings.ToUpper(issue.Severity), issue.Message)

	if issue.Line > 0 {
		fmt.Printf("     üìç –°—Ç—Ä–æ–∫–∞: %d\n", issue.Line)
	}

	if issue.File != "" {
		fmt.Printf("     üìÅ –§–∞–π–ª: %s\n", issue.File)
	}

	if issue.Suggestion != "" {
		fmt.Printf("     üí° –†–µ—à–µ–Ω–∏–µ: %s\n", issue.Suggestion)
	}

	if issue.Reasoning != "" {
		fmt.Printf("     üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: %s\n", issue.Reasoning)
	}
}

// printSecuritySummary –≤—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
func printSecuritySummary(securityIssues []types.Issue, verbose bool) {
	fmt.Printf("\nüìà –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n")

	severityCounts := make(map[string]int)
	typeCounts := make(map[string]int)

	for _, issue := range securityIssues {
		severityCounts[issue.Severity]++
		typeCounts[issue.Type]++
	}

	printSecuritySeverityStatistics(severityCounts)
	printSecurityTypeStatistics(typeCounts)
}

// printSecuritySeverityStatistics –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
func printSecuritySeverityStatistics(severityCounts map[string]int) {
	fmt.Printf("  üîç –ü–æ –≤–∞–∂–Ω–æ—Å—Ç–∏:\n")
	for _, severity := range []string{"critical", "high", "medium", "low", "info"} {
		if count := severityCounts[severity]; count > 0 {
			emoji := map[string]string{
				"critical": "üö®",
				"high":     "‚ö†Ô∏è",
				"medium":   "‚ö°",
				"low":      "üí°",
				"info":     "‚ÑπÔ∏è",
			}[severity]
			fmt.Printf("    %s %s: %d\n", emoji, strings.ToUpper(severity), count)
		}
	}
}

// printSecurityTypeStatistics –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø–∞–º
func printSecurityTypeStatistics(typeCounts map[string]int) {
	fmt.Printf("  üìä –ü–æ —Ç–∏–ø–∞–º:\n")
	for _, issueType := range []string{"security", "vulnerability", "injection", "xss", "sqli", "authentication", "authorization"} {
		if count := typeCounts[issueType]; count > 0 {
			emoji := map[string]string{
				"security":       "üîí",
				"vulnerability":  "üí•",
				"injection":      "üíâ",
				"xss":            "üåê",
				"sqli":           "üóÑÔ∏è",
				"authentication": "üîê",
				"authorization":  "üö™",
			}[issueType]
			fmt.Printf("    %s %s: %d\n", emoji, strings.ToUpper(issueType), count)
		}
	}
}

// saveSecurityResults —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª
func saveSecurityResults(securityIssues []types.Issue, output string, verbose bool) {
	if verbose {
		fmt.Printf("üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª: %s\n", output)
	}

	// –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
	result := &types.CodeAnalysisResult{
		Issues:    securityIssues,
		Score:     100 - len(securityIssues)*10, // –û—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–±–ª–µ–º
		Timestamp: time.Now(),
	}

	if err := saveResultsToFile([]*types.CodeAnalysisResult{result}, output); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %v\n", err)
	} else {
		fmt.Printf("\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: %s\n", output)
	}
}
