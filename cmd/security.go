package cmd

import (
	"fmt"
	"os"
	"strings"

	"miniReviewer/internal/analyzer"
	"miniReviewer/internal/filesystem"
	"miniReviewer/internal/types"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

// SecurityCmd –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
func SecurityCmd() *cobra.Command {
	var checkDeps, scanCode bool
	var output, path string

	cmd := &cobra.Command{
		Use:   "security",
		Short: "AI-–∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞",
		Long: `–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–¥ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI (Ollama).
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –∫–æ–¥ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
–ú–æ–∂–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã, —Ç–∞–∫ –∏ —Ü–µ–ª—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.`,
		Run: func(cmd *cobra.Command, args []string) {
			verbose := viper.GetBool("verbose")

			fmt.Println("üîí –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
			fmt.Printf("–ú–æ–¥–µ–ª—å: %s\n", viper.GetString("ollama.default_model"))
			fmt.Printf("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: %t\n", checkDeps)
			fmt.Printf("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞: %t\n", scanCode)

			if verbose {
				fmt.Println("üîç –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω")
				fmt.Printf("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n")
				fmt.Printf("  - –í–∫–ª—é—á–µ–Ω–æ: %t\n", viper.GetBool("security.enabled"))
				fmt.Printf("  - AI-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: %t\n", viper.GetBool("security.ai_vulnerability_scan"))
				fmt.Printf("  - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤: %t\n", viper.GetBool("security.check_secrets"))
				fmt.Printf("  - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: %t\n", viper.GetBool("security.check_permissions"))
			}

			if scanCode {
				fmt.Println("üîç –°–∫–∞–Ω–∏—Ä—É—é –∫–æ–¥ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")

				// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
				analysisPath := "."
				if path != "" {
					analysisPath = path
				}

				if verbose {
					fmt.Printf("üìÅ –ü—É—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: %s\n", analysisPath)
					fmt.Println("üìÅ –ü–æ–∏—Å–∫ Go —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
				}

				ignorePatterns := viper.GetStringSlice("analysis.ignore_patterns")
				scanner := filesystem.NewScanner(ignorePatterns, 0)

				var files []string
				var err error

				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å —Ñ–∞–π–ª–æ–º
				if fileInfo, statErr := os.Stat(analysisPath); statErr == nil && !fileInfo.IsDir() {
					// –≠—Ç–æ —Ñ–∞–π–ª - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Go —Ñ–∞–π–ª
					if strings.HasSuffix(analysisPath, ".go") {
						files = []string{analysisPath}
					} else {
						fmt.Printf("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Go —Ñ–∞–π–ª–æ–º: %s\n", analysisPath)
						os.Exit(1)
					}
				} else {
					// –≠—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è - –∏—â–µ–º Go —Ñ–∞–π–ª—ã
					files, err = scanner.FindGoFiles(analysisPath)
				}
				if err != nil {
					fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: %v\n", err)
					os.Exit(1)
				}

				if verbose {
					fmt.Printf("üìã –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: %d\n", len(files))
				}

				var securityIssues []types.Issue
				codeAnalyzer := analyzer.NewCodeAnalyzer()

				for i, file := range files {
					if verbose {
						fmt.Printf("üîç [%d/%d] –°–∫–∞–Ω–∏—Ä—É—é: %s\n", i+1, len(files), file)
					}

					content, err := os.ReadFile(file)
					if err != nil {
						if verbose {
							fmt.Printf("   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: %v\n", err)
						}
						continue
					}

					if verbose {
						fmt.Printf("   üìÑ –†–∞–∑–º–µ—Ä: %d –±–∞–π—Ç\n", len(content))
					}

					// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
					issues := codeAnalyzer.AnalyzeSecurity(string(content), file)
					if verbose && len(issues) > 0 {
						fmt.Printf("   ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: %d\n", len(issues))
					}
					securityIssues = append(securityIssues, issues...)
				}

				fmt.Printf("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n")
				fmt.Printf("–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: %d\n", len(securityIssues))

				if verbose {
					fmt.Printf("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–±–ª–µ–º:\n")
					issueTypes := make(map[string]int)
					severityCounts := make(map[string]int)

					for _, issue := range securityIssues {
						issueTypes[issue.Type]++
						severityCounts[issue.Severity]++
					}

					fmt.Printf("  –ü–æ —Ç–∏–ø–∞–º:\n")
					for issueType, count := range issueTypes {
						fmt.Printf("    - %s: %d\n", issueType, count)
					}

					fmt.Printf("  –ü–æ –≤–∞–∂–Ω–æ—Å—Ç–∏:\n")
					for severity, count := range severityCounts {
						fmt.Printf("    - %s: %d\n", severity, count)
					}
					fmt.Println()
				}

				for _, issue := range securityIssues {
					if verbose {
						// –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ —Å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º–∏ –º–æ–¥–µ–ª–∏
						fmt.Printf("  ‚ö†Ô∏è  [%s] %s (—Å—Ç—Ä–æ–∫–∞ %d):\n", strings.ToUpper(issue.Severity), issue.Type, issue.Line)
						fmt.Printf("     üí¨ %s\n", issue.Message)
						fmt.Printf("     üí° %s\n", issue.Suggestion)
						if issue.Reasoning != "" {
							fmt.Printf("     üß† %s\n", issue.Reasoning)
						}
					} else {
						// –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–∞ –∏ —Å—Ç—Ä–æ–∫–∞
						if issue.Line > 0 {
							fmt.Printf("‚ö†Ô∏è  [%s] %s (—Å—Ç—Ä–æ–∫–∞ %d): %s\n", issue.Severity, issue.File, issue.Message)
						} else {
							fmt.Printf("‚ö†Ô∏è  [%s] %s: %s\n", issue.Severity, issue.File, issue.Message)
						}
					}
				}
			}

			fmt.Println("‚úÖ –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
		},
	}

	cmd.Flags().StringVar(&path, "path", ".", "–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ –ø–∞–ø–∫–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
	cmd.Flags().BoolVar(&checkDeps, "check-dependencies", true, "–ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏")
	cmd.Flags().BoolVar(&scanCode, "scan-code", true, "—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
	cmd.Flags().StringVarP(&output, "output", "o", "", "—Ñ–∞–π–ª –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")

	return cmd
}
