# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Build for multiple platforms
      run: |
        GOOS=linux GOARCH=amd64 go build -o miniReviewer-linux-amd64 ./cmd
        GOOS=linux GOARCH=arm64 go build -o miniReviewer-linux-arm64 ./cmd
        GOOS=darwin GOARCH=amd64 go build -o miniReviewer-darwin-amd64 ./cmd
        GOOS=darwin GOARCH=arm64 go build -o miniReviewer-darwin-arm64 ./cmd
        GOOS=windows GOARCH=amd64 go build -o miniReviewer-windows-amd64.exe ./cmd
        GOOS=windows GOARCH=arm64 go build -o miniReviewer-windows-arm64.exe ./cmd

    - name: List built files
      run: ls -la miniReviewer-*

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## What's Changed
          
          Automated release for version ${{ github.ref_name }}
          
          ## Downloads
          
          - **Linux AMD64**: `miniReviewer-linux-amd64`
          - **Linux ARM64**: `miniReviewer-linux-arm64`
          - **macOS AMD64**: `miniReviewer-darwin-amd64`
          - **macOS ARM64**: `miniReviewer-darwin-arm64`
          - **Windows AMD64**: `miniReviewer-windows-amd64.exe`
          - **Windows ARM64**: `miniReviewer-windows-arm64.exe`
        draft: false
        prerelease: false

    - name: Upload Release Assets - Linux AMD64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./miniReviewer-linux-amd64
        asset_name: miniReviewer-linux-amd64
        asset_content_type: application/octet-stream

    - name: Upload Release Assets - Linux ARM64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./miniReviewer-linux-arm64
        asset_name: miniReviewer-linux-arm64
        asset_content_type: application/octet-stream

    - name: Upload Release Assets - macOS AMD64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./miniReviewer-darwin-amd64
        asset_name: miniReviewer-darwin-amd64
        asset_content_type: application/octet-stream

    - name: Upload Release Assets - macOS ARM64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./miniReviewer-darwin-arm64
        asset_name: miniReviewer-darwin-arm64
        asset_content_type: application/octet-stream

    - name: Upload Release Assets - Windows AMD64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./miniReviewer-windows-amd64.exe
        asset_name: miniReviewer-windows-amd64.exe
        asset_content_type: application/octet-stream

    - name: Upload Release Assets - Windows ARM64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./miniReviewer-windows-arm64.exe
        asset_name: miniReviewer-windows-arm64.exe
        asset_content_type: application/octet-stream
