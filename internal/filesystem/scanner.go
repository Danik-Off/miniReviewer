package filesystem

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"time"
)

// Scanner —Å–∫–∞–Ω–µ—Ä —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
type Scanner struct {
	ignorePatterns []string
	maxFileSize    int64
}

// NewScanner —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å–∫–∞–Ω–µ—Ä —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
func NewScanner(ignorePatterns []string, maxFileSize int64) *Scanner {
	return &Scanner{
		ignorePatterns: ignorePatterns,
		maxFileSize:    maxFileSize,
	}
}

// FindGoFiles –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ Go —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
func (s *Scanner) FindGoFiles(root string) ([]string, error) {
	var files []string
	err := filepath.Walk(root, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if !info.IsDir() && strings.HasSuffix(path, ".go") {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
			if s.maxFileSize > 0 && info.Size() > s.maxFileSize {
				return nil
			}
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
			if !s.shouldIgnoreFile(path) {
				files = append(files, path)
			}
		}
		return nil
	})
	return files, err
}

// FindFilesByExtension –Ω–∞—Ö–æ–¥–∏—Ç —Ñ–∞–π–ª—ã –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
func (s *Scanner) FindFilesByExtension(root, extension string) ([]string, error) {
	var files []string
	err := filepath.Walk(root, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if !info.IsDir() && strings.HasSuffix(path, extension) {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
			if s.maxFileSize > 0 && info.Size() > s.maxFileSize {
				return nil
			}
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
			if !s.shouldIgnoreFile(path) {
				files = append(files, path)
			}
		}
		return nil
	})
	return files, err
}

// FindSupportedFiles –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
func (s *Scanner) FindSupportedFiles(root string) ([]string, error) {
	var files []string
	supportedExtensions := []string{".go", ".js", ".ts", ".py", ".java", ".cpp", ".rs", ".kt"}
	
	err := filepath.Walk(root, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if !info.IsDir() {
			ext := strings.ToLower(filepath.Ext(path))
			for _, supportedExt := range supportedExtensions {
				if ext == supportedExt {
					// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
					if s.maxFileSize > 0 && info.Size() > s.maxFileSize {
						return nil
					}
					// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
					if !s.shouldIgnoreFile(path) {
						files = append(files, path)
					}
					break
				}
			}
		}
		return nil
	})
	return files, err
}

// shouldIgnoreFile –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ —Ñ–∞–π–ª –±—ã—Ç—å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω
func (s *Scanner) shouldIgnoreFile(file string) bool {
	for _, pattern := range s.ignorePatterns {
		if strings.Contains(file, pattern) {
			return true
		}
	}
	return false
}

// AnalyzeProjectStructure –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
func (s *Scanner) AnalyzeProjectStructure(root string) (string, error) {
	var structure strings.Builder
	structure.WriteString("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:\n")

	err := filepath.Walk(root, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		relPath, _ := filepath.Rel(root, path)
		if relPath == "." {
			return nil
		}

		depth := strings.Count(relPath, string(os.PathSeparator))
		indent := strings.Repeat("  ", depth)

		if info.IsDir() {
			structure.WriteString(fmt.Sprintf("%süìÅ %s/\n", indent, filepath.Base(path)))
		} else {
			structure.WriteString(fmt.Sprintf("%süìÑ %s\n", indent, filepath.Base(path)))
		}

		return nil
	})

	return structure.String(), err
}

// GetFileInfo –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
func (s *Scanner) GetFileInfo(filepath string) (*FileInfo, error) {
	info, err := os.Stat(filepath)
	if err != nil {
		return nil, err
	}

	return &FileInfo{
		Name:    info.Name(),
		Size:    info.Size(),
		Mode:    info.Mode(),
		ModTime: info.ModTime(),
		IsDir:   info.IsDir(),
	}, nil
}

// FileInfo –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
type FileInfo struct {
	Name    string      `json:"name"`
	Size    int64       `json:"size"`
	Mode    os.FileMode `json:"mode"`
	ModTime time.Time   `json:"mod_time"`
	IsDir   bool        `json:"is_dir"`
}
