package analyzer

import (
	"encoding/json"
	"fmt"
	"os"
	"regexp"
	"strings"
	"time"

	"miniReviewer/internal/types"
)

// detectLanguage –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
func detectLanguage(context string) string {
	if strings.Contains(context, "JavaScript") || strings.Contains(context, ".js") || strings.Contains(context, ".ts") {
		return "JavaScript/TypeScript"
	} else if strings.Contains(context, "Go") || strings.Contains(context, ".go") {
		return "Go"
	} else if strings.Contains(context, "Python") || strings.Contains(context, ".py") {
		return "Python"
	} else if strings.Contains(context, "Java") || strings.Contains(context, ".java") {
		return "Java"
	} else if strings.Contains(context, "C++") || strings.Contains(context, ".cpp") || strings.Contains(context, ".cc") {
		return "C++"
	} else if strings.Contains(context, "Rust") || strings.Contains(context, ".rs") {
		return "Rust"
	} else if strings.Contains(context, "PHP") || strings.Contains(context, ".php") {
		return "PHP"
	} else if strings.Contains(context, "Ruby") || strings.Contains(context, ".rb") {
		return "Ruby"
	}
	return "–∫–æ–¥"
}

// extractJSONFromResponse –∏–∑–≤–ª–µ–∫–∞–µ—Ç JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI
func extractJSONFromResponse(response string) string {
	// –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
	response = strings.TrimSpace(response)

	// –ò—â–µ–º JSON –æ–±—ä–µ–∫—Ç
	jsonPattern := regexp.MustCompile(`\{[\s\S]*\}`)
	matches := jsonPattern.FindString(response)

	if matches != "" {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON
		var test interface{}
		if json.Unmarshal([]byte(matches), &test) == nil {
			return matches
		}
	}

	return ""
}

// createBaseFallbackResult —Å–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç
func createBaseFallbackResult(analyzerType, message, suggestion string) *types.CodeAnalysisResult {
	return &types.CodeAnalysisResult{
		Issues: []types.Issue{
			{
				Type:       analyzerType,
				Severity:   "info",
				Message:    message,
				Suggestion: suggestion,
				Reasoning:  "AI –Ω–µ —Å–º–æ–≥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ",
			},
		},
		Score:     75, // –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		Timestamp: time.Now(),
	}
}

// validateAndFixBaseResult –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
func validateAndFixBaseResult(result types.CodeAnalysisResult, defaultType, defaultMessage, defaultSuggestion string) types.CodeAnalysisResult {
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞
	if result.Score <= 0 || result.Score > 100 {
		result.Score = 75
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ª–∞–π—Å –µ—Å–ª–∏ issues –Ω–µ –∑–∞–¥–∞–Ω
	if result.Issues == nil {
		result.Issues = []types.Issue{}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –ø—Ä–æ–±–ª–µ–º—É
	for i := range result.Issues {
		issue := &result.Issues[i]

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		if issue.Type == "" {
			issue.Type = defaultType
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		if issue.Severity == "" {
			issue.Severity = "medium"
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
		if issue.Message == "" {
			issue.Message = defaultMessage
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
		if issue.Suggestion == "" {
			issue.Suggestion = defaultSuggestion
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
		if issue.Line < 0 {
			issue.Line = 0
		}
	}

	return result
}

// extractIssuesFromTextBase –ø—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ AI
func extractIssuesFromTextBase(text, analyzerType, defaultMessage, defaultSuggestion string, keywords []string) []types.Issue {
	var issues []types.Issue

	// –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
	lines := strings.Split(text, "\n")

	for _, line := range lines {
		line = strings.TrimSpace(line)
		if line == "" {
			continue
		}

		// –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
		hasKeyword := false
		for _, keyword := range keywords {
			if strings.Contains(strings.ToLower(line), strings.ToLower(keyword)) {
				hasKeyword = true
				break
			}
		}

		if hasKeyword {
			issue := types.Issue{
				Type:       analyzerType,
				Severity:   "medium",
				Message:    line,
				Suggestion: defaultSuggestion,
				Reasoning:  "AI –Ω–µ —Å–º–æ–≥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ",
			}

			issues = append(issues, issue)
		}
	}

	// –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø—Ä–æ–±–ª–µ–º, —Å–æ–∑–¥–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
	if len(issues) == 0 {
		issues = []types.Issue{
			{
				Type:       analyzerType,
				Severity:   "info",
				Message:    defaultMessage,
				Suggestion: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–≤–µ—Ç AI –≤—Ä—É—á–Ω—É—é",
				Reasoning:  "AI –≤–µ—Ä–Ω—É–ª –Ω–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç",
			},
		}
	}

	return issues
}

// ===== –û–ë–©–ò–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –í–´–í–û–î–ê =====

// PrintFileList –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
func PrintFileList(files []string) {
	fmt.Printf("üìã –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n")
	for i, file := range files {
		fmt.Printf("  %d. %s\n", i+1, file)
	}
}

// PrintIssues –≤—ã–≤–æ–¥–∏—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
func PrintIssues(issues []types.Issue, verbose bool) {
	for i, issue := range issues {
		if verbose {
			// –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ —Å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º–∏ –º–æ–¥–µ–ª–∏
			fmt.Printf("\n   %d. [%s] %s (—Å—Ç—Ä–æ–∫–∞ %d):\n", i+1, strings.ToUpper(issue.Severity), issue.Type, issue.Line)
			fmt.Printf("      üí¨ –ü—Ä–æ–±–ª–µ–º–∞: %s\n", issue.Message)
			if issue.Suggestion != "" {
				fmt.Printf("      üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: %s\n", issue.Suggestion)
			}
			if issue.Reasoning != "" {
				fmt.Printf("      üß† %s\n", issue.Reasoning)
			}
		} else {
			// –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–∞ –∏ —Å—Ç—Ä–æ–∫–∞
			if issue.Line > 0 {
				fmt.Printf("\n   %d. [%s] %s (—Å—Ç—Ä–æ–∫–∞ %d): %s\n", i+1, strings.ToUpper(issue.Severity), issue.Type, issue.Line, issue.Message)
			} else {
				fmt.Printf("\n   %d. [%s] %s: %s\n", i+1, strings.ToUpper(issue.Severity), issue.Type, issue.Message)
			}
		}
	}
}

// PrintFileIssues –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
func PrintFileIssues(result *types.CodeAnalysisResult, verbose bool) {
	fmt.Printf("\nüìÅ %s:\n", result.File)
	for _, issue := range result.Issues {
		if verbose {
			// –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ —Å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º–∏ –º–æ–¥–µ–ª–∏
			fmt.Printf("  ‚ö†Ô∏è  [%s] %s (—Å—Ç—Ä–æ–∫–∞ %d):\n", strings.ToUpper(issue.Severity), issue.Type, issue.Line)
			fmt.Printf("     üí¨ %s\n", issue.Message)
			fmt.Printf("     üí° %s\n", issue.Suggestion)
			if issue.Reasoning != "" {
				fmt.Printf("     üß† %s\n", issue.Reasoning)
			}
		} else {
			// –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º–∞ –∏ —Å—Ç—Ä–æ–∫–∞
			if issue.Line > 0 {
				fmt.Printf("  ‚ö†Ô∏è  [%s] %s (—Å—Ç—Ä–æ–∫–∞ %d): %s\n", strings.ToUpper(issue.Severity), issue.Type, issue.Line, issue.Message)
			} else {
				fmt.Printf("  ‚ö†Ô∏è  [%s] %s: %s\n", strings.ToUpper(issue.Severity), issue.Type, issue.Message)
			}
		}
	}
}

// PrintStatistics –≤—ã–≤–æ–¥–∏—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞
func PrintStatistics(results []*types.CodeAnalysisResult, verbose bool) {
	if len(results) == 0 {
		return
	}

	totalScore := 0
	totalIssues := 0

	for _, result := range results {
		totalScore += result.Score
		totalIssues += len(result.Issues)
	}

	avgScore := totalScore / len(results)

	fmt.Printf("\nüìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n")
	fmt.Printf("–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: %d/100\n", avgScore)
	fmt.Printf("–í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: %d\n", totalIssues)
	fmt.Printf("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: %d\n", len(results))

	if verbose {
		fmt.Printf("\nüìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n")
		fmt.Printf("  - –û–±—â–∏–π –±–∞–ª–ª: %d\n", totalScore)
		fmt.Printf("  - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: %d\n", len(results))
		fmt.Printf("  - –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: %.2f\n", float64(totalScore)/float64(len(results)))
		fmt.Printf("  - –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º –Ω–∞ —Ñ–∞–π–ª: %.2f\n", float64(totalIssues)/float64(len(results)))
	}
}

// PrintOverallStatistics –≤—ã–≤–æ–¥–∏—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
func PrintOverallStatistics(results []*types.CodeAnalysisResult, verbose bool) {
	if len(results) == 0 {
		return
	}

	totalScore := 0
	totalIssues := 0

	for _, result := range results {
		totalScore += result.Score
		totalIssues += len(result.Issues)
	}

	avgScore := totalScore / len(results)

	fmt.Printf("\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n")
	fmt.Printf("  –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: %d\n", len(results))
	fmt.Printf("  –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: %d/100\n", avgScore)
	fmt.Printf("  –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: %d\n", totalIssues)

	if verbose {
		fmt.Printf("  –û–±—â–∏–π –±–∞–ª–ª: %d\n", totalScore)
		fmt.Printf("  –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: %.2f\n", float64(totalIssues)/float64(len(results)))
	}
}

// PrintSeverityStatistics –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–±–ª–µ–º
func PrintSeverityStatistics(severityCounts map[string]int) {
	fmt.Printf("  üîç –ü–æ –≤–∞–∂–Ω–æ—Å—Ç–∏:\n")
	for severity, count := range severityCounts {
		icon := getSeverityIcon(severity)
		fmt.Printf("    %s %s: %d\n", icon, strings.ToUpper(severity), count)
	}
}

// PrintTypeStatistics –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–±–ª–µ–º
func PrintTypeStatistics(typeCounts map[string]int) {
	fmt.Printf("  üìä –ü–æ —Ç–∏–ø–∞–º:\n")
	for issueType, count := range typeCounts {
		icon := getTypeIcon(issueType)
		fmt.Printf("    %s %s: %d\n", icon, strings.ToUpper(issueType), count)
	}
}

// getSeverityIcon –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã
func getSeverityIcon(severity string) string {
	switch strings.ToLower(severity) {
	case "critical":
		return "üö®"
	case "high":
		return "üî¥"
	case "medium":
		return "üü°"
	case "low":
		return "üü¢"
	case "info":
		return "‚ÑπÔ∏è"
	default:
		return "‚ö†Ô∏è"
	}
}

// getTypeIcon –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã
func getTypeIcon(issueType string) string {
	switch strings.ToLower(issueType) {
	case "security":
		return "üîí"
	case "quality":
		return "‚ú®"
	case "architecture":
		return "üèóÔ∏è"
	case "performance":
		return "‚ö°"
	case "maintainability":
		return "üîß"
	case "readability":
		return "üìñ"
	case "testability":
		return "üß™"
	default:
		return "üìù"
	}
}

// ===== –û–ë–©–ò–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø =====

// SaveResultsToFile —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–∞–π–ª
func SaveResultsToFile(results interface{}, filename string) error {
	data, err := json.MarshalIndent(results, "", "  ")
	if err != nil {
		return err
	}
	return os.WriteFile(filename, data, 0644)
}

// saveAnalysisResultsBase —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–∞–π–ª (–±–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
func saveAnalysisResultsBase(results interface{}, output string, verbose bool, analyzerName string) {
	if verbose {
		fmt.Printf("üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã %s –≤ —Ñ–∞–π–ª: %s\n", analyzerName, output)
	}

	if err := SaveResultsToFile(results, output); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %v\n", err)
	} else {
		fmt.Printf("\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã %s —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: %s\n", analyzerName, output)
	}
}
